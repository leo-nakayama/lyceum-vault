{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lyceum Vault","text":"<p>Welcome to my public knowledge space \u2014 a living notebook where I publish my projects, documentation, and essays.</p> <p>What is this site?</p> <p>This site is built with MkDocs + Material, deployed on GitHub Pages. Content is plain Markdown so I can draft in Obsidian and publish here easily.</p>"},{"location":"#highlights","title":"Highlights","text":"<ul> <li>Projects: DSL inference app, Lyceum Workbench (Linux + automation + music)</li> <li>Notes: Practical guides (Fedora Samba, Fcitx5, PreSonus cancel guide)</li> <li>Essays: Education narratives, culture/tech reflections</li> </ul> <p>Repo: [<code>https://github.com/leo-nakayama/leo-nakayama.github.io</code>]</p>"},{"location":"essays/education-narrative-structure/","title":"Education Narrative Structure (Notes)","text":"<p>Exploring how narratives of sacrifice/virtue are embedded in education and public memory. Draft pointers:</p> <ul> <li>Telos differences: community preservation vs individual completion</li> <li>Risks of beautified sacrifice narratives in curriculum</li> <li>Comparative framing with popular culture (e.g., anime) and memorial sites</li> </ul> <p>WIP outline; fuller essay to be published here.</p>"},{"location":"meta/content-update-protocol/","title":"\ud83e\udded Lyceum Vault \u2014 Content Update Protocol","text":"<p>Authoring and publishing workflow guide</p>"},{"location":"meta/content-update-protocol/#purpose","title":"Purpose","text":"<p>To maintain a consistent, traceable rhythm for updating the Lyceum Vault. This protocol describes how new ideas \u2014 notes, essays, or projects \u2014 move from draft to publication.</p>"},{"location":"meta/content-update-protocol/#1-draft-phase-local","title":"1\ufe0f\u20e3 Draft Phase (Local)","text":"<ol> <li>Decide category</li> <li><code>docs/notes/</code> \u2192 technical or conceptual memo  </li> <li><code>docs/essays/</code> \u2192 reflective or philosophical text  </li> <li> <p><code>docs/projects/</code> \u2192 documentation of a running or planned system</p> </li> <li> <p>Create Markdown file</p> </li> </ol> <pre><code>   cd docs/notes\n   touch new-topic.md\n````\n\nWrite freely in Obsidian or a Markdown editor.\nInclude a `# Title`, sections, and (if relevant) diagrams or code.\n\n3. **Local preview**\n\n```bash\n   mkdocs serve\n</code></pre> <p>Access at http://127.0.0.1:8000 to verify layout and internal links.</p>"},{"location":"meta/content-update-protocol/#2-integration-phase","title":"2\ufe0f\u20e3 Integration Phase","text":"<ol> <li>Edit navigation in <code>mkdocs.yml</code>:</li> </ol> <p><code>yaml    nav:      - Notes:          - New Topic Title: notes/new-topic.md</code> 2. Check for broken links</p> <p><code>bash    mkdocs build --strict</code></p> <p>If no warnings \u2192 proceed.</p>"},{"location":"meta/content-update-protocol/#3-publish-phase","title":"3\ufe0f\u20e3 Publish Phase","text":"<ol> <li>Commit and push</li> </ol> <p><code>bash    git add .    git commit -m \"Add: new note on &lt;topic&gt;\"    git push</code> 2. The GitHub Actions workflow runs automatically:</p> <ul> <li>Builds the site</li> <li> <p>Deploys it to <code>gh-pages</code></p> </li> <li> <p>Within 1\u20132 minutes, the live site updates at    <code>https://&lt;username&gt;.github.io/lyceum-vault/</code></p> </li> </ul>"},{"location":"meta/content-update-protocol/#4-collaboration-phase-with-gpt","title":"4\ufe0f\u20e3 Collaboration Phase (with GPT)","text":"<p>When co-developing new modules or essays:</p> <ol> <li>Zip current repo (excluding <code>/site</code>):</li> </ol> <p><code>bash    zip -r lyceum-vault-update.zip docs mkdocs.yml .github</code> 2. Upload here (ChatGPT session).</p> <ol> <li> <p>GPT will:</p> </li> <li> <p>Read the current structure</p> </li> <li>Suggest new folder paths and filenames</li> <li>Draft content or update navigation automatically</li> </ol>"},{"location":"meta/content-update-protocol/#5-maintenance-phase","title":"5\ufe0f\u20e3 Maintenance Phase","text":"<pre><code>| Task               | Frequency           | Command / Note                          |\n| ------------------ | ------------------- | --------------------------------------- |\n| Dependency updates | Monthly             | `pip install -U mkdocs mkdocs-material` |\n| Local link audit   | Before big releases | `mkdocs build --strict`                 |\n| Backup             | Continuous          | Push repo to GitHub (auto backup)       |\n</code></pre>"},{"location":"notes/fcitx5-setup/","title":"Fcitx5 Setup (KDE/Ubuntu Quick Notes)","text":""},{"location":"notes/fcitx5-setup/#steps","title":"Steps","text":"<ol> <li>Install: <code>sudo apt install fcitx5 fcitx5-mozc</code> </li> <li>Set input method: <code>im-config -n fcitx5</code> (logout/login)  </li> <li>Ensure env:     <code>bash     echo $XMODIFIERS     echo $GTK_IM_MODULE     echo $QT_IM_MODULE</code></li> <li>Autostart if needed: <code>~/.config/autostart/fcitx5.desktop</code></li> </ol>"},{"location":"notes/fcitx5-setup/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If tray icon missing: verify <code>fcitx5</code> is installed and running</li> <li>Wayland notes: prefer recent KDE Plasma versions</li> </ul>"},{"location":"notes/fedora-samba-permissions/","title":"Fedora/Kubuntu Samba Permissions Cheatsheet","text":""},{"location":"notes/fedora-samba-permissions/#server-selinux-permissions","title":"Server (SELinux + permissions)","text":"<pre><code># Label share dir\nsudo semanage fcontext -a -t samba_share_t \"/srv/share(/.*)?\"\nsudo restorecon -Rv /srv/share\n\n# Group + ACLs\nsudo chgrp -R sambausers /srv/share\nsudo chmod -R 2775 /srv/share\nsudo setfacl -R -m g:sambausers:rwx /srv/share\n</code></pre>"},{"location":"notes/fedora-samba-permissions/#smbconf-snippet","title":"smb.conf (snippet)","text":"<pre><code>[share]\n   path = /srv/share\n   browsable = yes\n   writable = yes\n   valid users = @sambausers\n   force group = sambausers\n   create mask = 0664\n   directory mask = 2775\n</code></pre>"},{"location":"notes/fedora-samba-permissions/#client-mount-etcfstab","title":"Client mount (/etc/fstab)","text":"<pre><code># //server/share  /mnt/share  cifs  credentials=/etc/samba/creds,vers=3.0,iocharset=utf8,uid=&lt;user&gt;,gid=&lt;group&gt;,file_mode=0664,dir_mode=0775  0  0\n</code></pre>"},{"location":"notes/github-actions-vs-aws-cicd/","title":"\u201cMkDocs to GitHub Pages\u201d on AWS (conceptual equivalent)","text":""},{"location":"notes/github-actions-vs-aws-cicd/#diagram-high-level","title":"Diagram (high-level)","text":"<pre><code>You push to main\n        \u2502\n        \u25bc\n CodePipeline (source: GitHub or CodeCommit)\n        \u2502\n   triggers build\n        \u25bc\n   CodeBuild (uses buildspec.yml)\n  - pip install mkdocs/material\n  - mkdocs build \u2192 ./site\n        \u2502\n  artifacts: ./site (static HTML/CSS/JS)\n        \u2502\n        \u25bc\n Deploy stage\n   \u2022 S3 static website bucket (upload ./site)\n   \u2022 (optional) Invalidate CloudFront cache\n</code></pre>"},{"location":"notes/github-actions-vs-aws-cicd/#core-pieces-youd-create","title":"Core pieces you\u2019d create","text":"<ol> <li> <p>S3 bucket for hosting the static site</p> </li> <li> <p>Example: <code>s3://lyceum-vault-site</code></p> </li> <li> <p>Block public access OFF, website hosting ON (or keep private + serve via CloudFront)</p> </li> <li> <p>(Recommended) CloudFront distribution in front of S3</p> </li> <li> <p>Custom domain + TLS via ACM</p> </li> <li> <p>Better latency + cache control</p> </li> <li> <p>CodeBuild project</p> </li> <li> <p>Builds the site using a <code>buildspec.yml</code></p> </li> <li> <p>Outputs <code>site/</code> as artifacts</p> </li> <li> <p>CodePipeline</p> </li> <li> <p>Source: GitHub (or CodeCommit)</p> </li> <li>Build: CodeBuild project</li> <li> <p>Deploy: S3 deploy (and optional CloudFront invalidation via a custom Lambda or CodeBuild post-step)</p> </li> <li> <p>IAM roles/policies</p> </li> <li> <p>CodeBuild role: read source, write artifacts, put to S3</p> </li> <li>Pipeline role: orchestrate stages</li> </ol>"},{"location":"notes/github-actions-vs-aws-cicd/#minimal-buildspecyml-mkdocs","title":"Minimal <code>buildspec.yml</code> (MkDocs)","text":"<p>Place this at your repo root (used by CodeBuild):</p> <pre><code>version: 0.2\n\nphases:\n  install:\n    runtime-versions:\n      python: 3.12\n    commands:\n      - pip install --upgrade pip\n      - pip install mkdocs mkdocs-material\n  build:\n    commands:\n      - mkdocs build --strict\nartifacts:\n  files:\n    - '**/*'\n  base-directory: site\n  discard-paths: no\n</code></pre> <p>This mirrors your GitHub Actions steps: install \u2192 build \u2192 produce <code>site/</code> as artifacts.</p>"},{"location":"notes/github-actions-vs-aws-cicd/#example-s3-deploy-cli-one-off-or-from-a-deploy-stage","title":"Example S3 deploy (CLI) \u2013 one-off or from a deploy stage","text":"<pre><code># Upload locally built site/ to S3\naws s3 sync site/ s3://lyceum-vault-site --delete\n</code></pre> <p>In CodePipeline, the Deploy action would publish the build artifact to S3 automatically.</p>"},{"location":"notes/github-actions-vs-aws-cicd/#typical-iam-policy-snippet-for-codebuild-to-write-to-your-s3-bucket","title":"Typical IAM policy snippet for CodeBuild to write to your S3 bucket","text":"<pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    { \"Effect\": \"Allow\", \"Action\": [\"s3:PutObject\",\"s3:PutObjectAcl\",\"s3:DeleteObject\"], \"Resource\": \"arn:aws:s3:::lyceum-vault-site/*\" },\n    { \"Effect\": \"Allow\", \"Action\": [\"s3:ListBucket\"], \"Resource\": \"arn:aws:s3:::lyceum-vault-site\" }\n  ]\n}\n</code></pre> <p>In production, you\u2019d scope permissions tightly and wire them to your CodeBuild role.</p>"},{"location":"notes/github-actions-vs-aws-cicd/#why-github-actions-feels-simpler","title":"Why GitHub Actions \"feels\" simpler","text":"<ul> <li>Fewer moving parts: one YAML in your repo; no IAM/S3/CloudFront wiring.</li> <li>Built-in hosting: GitHub Pages vs rolling your own static hosting stack.</li> <li>Auth: ephemeral <code>GITHUB_TOKEN</code> vs IAM roles/secrets setup.</li> </ul>"},{"location":"notes/github-actions-vs-aws-cicd/#comparison","title":"Comparison","text":"<p>AWS shines when you need deep integration with AWS workloads (ECS/EKS/Lambda, multi-account deployments, secrets, VPC builds, etc.). For a static MkDocs site, GitHub Actions + Pages is lean and perfect.</p>"},{"location":"notes/github-actions-vs-aws-cicd/#github-actions-vs-aws-cicd-for-a-mkdocs-site","title":"GitHub Actions vs AWS CI/CD for a MkDocs Site","text":"<p>TL;DR For a static MkDocs site, GitHub Actions + GitHub Pages is simpler, cheaper, and faster to set up than AWS CodePipeline/CodeBuild/CodeDeploy + S3/CloudFront. Use AWS when you need enterprise-grade integrations with AWS workloads.</p>"},{"location":"notes/github-actions-vs-aws-cicd/#visual-github-actions-flow","title":"Visual: GitHub Actions Flow","text":"<pre><code>push to main\n\u2502\n\u25bc\nGitHub Actions (deploy.yml)\n\n1. checkout\n2. setup-python + pip install mkdocs/material\n3. mkdocs build \u2192 ./site\n4. deploy ./site \u2192 gh-pages\n   \u2502\n   \u25bc\n   GitHub Pages serves https://&lt;user&gt;.github.io/&lt;repo&gt;/\n</code></pre>"},{"location":"notes/github-actions-vs-aws-cicd/#visual-aws-equivalent-flow","title":"Visual: AWS \u201cEquivalent\u201d Flow","text":"<pre><code>push to main\n\u2502\n\u25bc\nCodePipeline (source: GitHub/CodeCommit)\n\u2502\n\u25bc\nCodeBuild (buildspec.yml)\n\n* pip install mkdocs/material\n* mkdocs build \u2192 ./site\n  \u2502\n  \u25bc\n  Artifact: site/ \u2192 Deploy to S3 static website (optional: CloudFront)\n</code></pre>"},{"location":"notes/github-actions-vs-aws-cicd/#when-to-choose-which","title":"When to choose which","text":"<pre><code>| Situation | Choose |\n|---|---|\n| Static docs/portfolio, simple publish | **GitHub Actions + Pages** |\n| AWS-native app deployments (EC2/ECS/Lambda), complex infra, multi-account | **AWS CodePipeline/CodeBuild/CodeDeploy** |\n| Need global CDN, custom domain, strict IAM | Either (CloudFront vs Pages + custom domain) |\n| Want single-place DevOps inside GitHub | **GitHub Actions** |\n</code></pre>"},{"location":"notes/github-actions-vs-aws-cicd/#minimal-files","title":"Minimal files","text":""},{"location":"notes/github-actions-vs-aws-cicd/#github-actions-githubworkflowsdeployyml","title":"GitHub Actions (<code>.github/workflows/deploy.yml</code>)","text":"<pre><code>name: Deploy MkDocs to GitHub Pages\non: { push: { branches: [ main ] }, workflow_dispatch: {} }\npermissions: { contents: write }\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with: { python-version: '3.12' }\n      - run: pip install --upgrade pip &amp;&amp; pip install mkdocs mkdocs-material\n      - run: mkdocs build --strict\n      - uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./site\n</code></pre>"},{"location":"notes/github-actions-vs-aws-cicd/#aws-codebuild-buildspecyml","title":"AWS CodeBuild (<code>buildspec.yml</code>)","text":"<pre><code>version: 0.2\nphases:\n  install:\n    runtime-versions: { python: 3.12 }\n    commands:\n      - pip install --upgrade pip\n      - pip install mkdocs mkdocs-material\n  build:\n    commands:\n      - mkdocs build --strict\nartifacts:\n  files: ['**/*']\n  base-directory: site\n  discard-paths: no\n</code></pre>"},{"location":"notes/github-actions-vs-aws-cicd/#cost-ops","title":"Cost &amp; Ops","text":"<ul> <li>GitHub: Free for public repos. Private repos have generous minutes. Pages hosting free.</li> <li>AWS: Pay per build minute, S3 storage/requests, CloudFront bandwidth. IAM setup and resource sprawl increase ops overhead.</li> </ul>"},{"location":"notes/github-actions-vs-aws-cicd/#faq","title":"FAQ","text":"<p>Q: Can I still use a custom domain with GitHub Pages? Yes. Point DNS (CNAME) to <code>&lt;user&gt;.github.io</code>, add the Custom domain in Pages settings (and optional <code>cname:</code> in the deploy action).</p> <p>Q: What about previews per branch? GitHub Actions supports deploying previews (e.g., to a <code>preview</code> prefix or separate bucket). On AWS you can create per-branch S3 buckets or CloudFront behaviors.</p> <p>Q: Is Pages fast enough vs CloudFront? For personal docs, usually yes. If you need strict latency or enterprise controls, use CloudFront.</p>"},{"location":"notes/presonus-cancel-guide/","title":"How to Cancel PreSonus Studio One Annual Subscription (Hidden Step)","text":"<p>If the \u201cCancel Membership\u201d button doesn\u2019t appear in MyPreSonus:</p> <ol> <li>Go to My Products \u2192 Software \u2192 Studio One \u2192 Activations </li> <li>Delete all licensed devices (deactivate registered computers)  </li> <li>Wait ~10\u201360 minutes for backend sync  </li> <li>Then go to Account \u2192 Membership &amp; Billing \u2192 Cancel Membership</li> </ol> <p>Note</p> <p>The cancel button only appears once no devices remain linked to the subscription.</p>"},{"location":"projects/dsl-inference-app/","title":"DSL Inference App","text":"<p>A Flask/CLI toolkit that runs my custom DSL modules (AristotleFourCauses, SyntheticNaikan, etc.).</p>"},{"location":"projects/dsl-inference-app/#goals","title":"Goals","text":"<ul> <li>Encode reasoning patterns as operators and pipelines</li> <li>Run locally with Python; optional LLM backends</li> <li>Reproducible, testable workflows</li> </ul>"},{"location":"projects/dsl-inference-app/#status","title":"Status","text":"<ul> <li>WIP: Sketching module interfaces and evaluation harness</li> </ul>"},{"location":"projects/dsl-inference-app/#links","title":"Links","text":"<ul> <li>Repo:"},{"location":"projects/lyceum-workbench/","title":"Lyceum Workbench","text":"<p>My multi-machine lab: g16 (desktop), e14 (laptop), m900 (server). Focused on Linux automation, backups, and creative workflows.</p>"},{"location":"projects/lyceum-workbench/#areas","title":"Areas","text":"<ul> <li>Storage tiers (hot/warm/cold), LVM, rsync/borg</li> <li>Samba + ACLs; remote access; CI/CD for home lab</li> <li>Music stack (LilyPond, Python Euclidean rhythms)</li> </ul>"},{"location":"projects/lyceum-workbench/#notes","title":"Notes","text":"<p>See related guides in Notes.</p>"},{"location":"reflective-computing/","title":"Reflective Computing","text":"<p>\u201cTo compute is to look into one\u2019s own thought \u2014 and return with form.\u201d</p>"},{"location":"reflective-computing/#overview","title":"Overview","text":"<p>Reflective Computing treats programming, reasoning, and artistic composition as parts of the same cognitive circuit:</p> <p>Intuition \u2192 Formalization \u2192 Execution \u2192 Reflection \u2192 Revised Intuition.</p> <p>This cycle forms the operational rhythm of Lyceum Vault. Where traditional computing optimizes for efficiency, Reflective Computing optimizes for awareness \u2014 turning every algorithm into a mirror of the mind that created it.</p>"},{"location":"reflective-computing/#core-modules","title":"Core Modules","text":"Module Focus Key Question Synthetic Naikan Programmed introspection \u201cWhat have I received, given, and caused?\u201d Aristotelian Biodome Four Causes + Euclidean rhythm model \u201cHow do form and telos co-emerge in creative systems?\u201d Dialectic Modes Contradiction and resolution as logic modes \u201cHow can tension be made computable?\u201d Reflective Computing Manifesto Philosophical foundation \u201cWhy does awareness belong in computation?\u201d"},{"location":"reflective-computing/#guiding-principles","title":"Guiding Principles","text":"<ol> <li>Transparency of Thought \u2014 Code should reveal, not obscure, the reasoning that shaped it.  </li> <li>Ethical Loop \u2014 Each execution produces not just output but insight.  </li> <li>Dual Materiality \u2014 Data and self-knowledge are both raw materials.  </li> <li>Iteration as Virtue \u2014 Reflection is a form of testing.  </li> <li>Computation as Dialogue \u2014 Between human intuition and machine formality.</li> </ol>"},{"location":"reflective-computing/#visual-summary","title":"Visual Summary","text":"<pre><code>                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                \u2502     Reflective Loop     \u2502\n                \u2502 Intuition \u2192 Formalize \u2192 \u2502\n                \u2502 Execute \u2192 Reflect  \u21ba    \u2502\n                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     \u2502                      \u2502                      \u2502\n\u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510           \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510           \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510\n\u2502Synthetic\u2502           \u2502Aristotel.\u2502           \u2502Dialectic \u2502\n\u2502 Naikan  \u2502           \u2502 Biodome  \u2502           \u2502  Modes   \u2502\n\u2502(Intros.)\u2502           \u2502(Ontology)\u2502           \u2502(Transform) \n\u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518           \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518           \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502  detects tensions        \u2502 embodies synthesis   \u2502 resolves contradictions\n    \u2502                          \u2502 (Material/Formal/    \u2502 (Thesis \u2194 Antithesis \u2192 Synthesis)\n    \u2502                          \u2502  Efficient/Final)    \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 feeds back into revised intuition \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nOutput artifacts:\n- Observation Reports (logs of receive/give/cause/reflect)\n- Evolving schemas (rhythm, harmony, operators)\n- Updated telos (evaluation criteria)\n</code></pre> <pre><code>flowchart TD\n  A[Intuition] --&gt; B[Formalization]\n  B --&gt; C[Execution]\n  C --&gt; D[Reflection]\n  D --&gt; A\n\n  subgraph Modules\n    N[Synthetic Naikan&lt;br/&gt;(Introspection)]\n    O[Aristotelian Biodome&lt;br/&gt;(Four Causes)]\n    M[Dialectic Modes&lt;br/&gt;(Thesis \u2194 Antithesis \u2192 Synthesis)]\n  end\n\n  D -.detects tensions.-&gt; M\n  M -.produces synthesis.-&gt; O\n  O -.re-embodies form.-&gt; B\n  N -.observation loop.-&gt; D\n  A -.human/machine dialogue.-&gt; N\n\n  subgraph Outputs\n    R[Observation Reports]\n    S[Evolving Schemas]\n    T[Updated Telos]\n  end\n\n  D --&gt; R\n  M --&gt; S\n  O --&gt; T\n</code></pre>"},{"location":"reflective-computing/#implementation-in-lyceum-vault","title":"Implementation in Lyceum Vault","text":"<p>Each module combines: - DSL schemas that model reasoning or musical logic, and - Observation Reports that track transformation over time.  </p> <p>Together they form a meta-instrument for composing, reasoning, and self-study \u2014 the Reflective Workbench.</p>"},{"location":"reflective-computing/#next-steps","title":"Next Steps","text":"<ol> <li>Integrate each sub-module page.  </li> <li>Link Observation Reports and DSL YAML schemas.  </li> <li>Expand this section into a public tutorial: \u201cReflective Computing in Practice.\u201d</li> </ol> <p>Draft v0.1 \u2014 Lyceum Vault Reflective Series Init</p>"},{"location":"reflective-computing/aristotelian-biodome/","title":"\ud83c\udfdb\ufe0f Aristotelian Biodome","text":"<pre><code>&gt; \u201cForm is not imposed on matter \u2014 it arises through rhythm.\u201d\n</code></pre>"},{"location":"reflective-computing/aristotelian-biodome/#1-overview","title":"1. Overview","text":"<p>Aristotelian Biodome reinterprets Aristotle\u2019s Four Causes \u2014 Material, Formal, Efficient, and Final \u2014 as a computational framework for reasoning and creativity. When expressed through code or music, these causes become layers of causation that interact dynamically, giving rise to living systems.</p> <p>In Reflective Computing, this framework is the metaphysical core \u2014 it defines why and how a process exists.</p>"},{"location":"reflective-computing/aristotelian-biodome/#2-the-four-causes-as-computational-schema","title":"2. The Four Causes as Computational Schema","text":"<pre><code>| Cause | DSL Role | Musical Analogue | Example |\n|--------|-----------|------------------|----------|\n| **Material Cause** | Data, raw signals, or sensory input | The sound itself \u2014 frequencies, timbres, durations | MIDI events, waveforms, sample data |\n| **Formal Cause** | Structure or schema governing form | Rhythm, harmony, counterpoint | Euclidean rhythm patterns, harmonic sequences |\n| **Efficient Cause** | Execution engine or transformation logic | The performer or algorithm executing form | Python process, instrument, human action |\n| **Final Cause** | Telos \u2014 the purpose or goal | Aesthetic or ethical end (e.g., \u201cbeauty,\u201d \u201cclarity,\u201d \u201ccoherence\u201d) | System intent; evaluation function |\n</code></pre> <p>Formulaic abstraction</p> <pre><code>Artifact = f(Material, Formal, Efficient, Final)\n</code></pre> <p>In code:</p> <pre><code>artifact = Organism(\n    material=SoundWave(),\n    formal=EuclideanRhythm(5, 8),\n    efficient=Performer(\"Python DSL\"),\n    final=\"Express balance through asymmetry\"\n)\nartifact.generate()\n</code></pre>"},{"location":"reflective-computing/aristotelian-biodome/#3-the-organism-model","title":"3. The Organism Model","text":"<p>Each cause acts as an organ \u2014 distinct in function but unified by rhythm.</p>"},{"location":"reflective-computing/aristotelian-biodome/#structural-analogy","title":"Structural Analogy","text":"<pre><code>Material \u2192 substrate / data layer\nFormal   \u2192 pattern / syntax layer\nEfficient \u2192 energy / process layer\nFinal    \u2192 telos / reflective evaluator\n</code></pre> <p>These four interact cyclically:</p> <pre><code>Input (Material)\n \u2192 Shaped by schema (Formal)\n \u2192 Enacted by execution (Efficient)\n \u2192 Measured by intention (Final)\n \u2192 Produces reflection \u2192 modifies schema\n</code></pre> <p>This cycle unites Aristotle\u2019s teleology with feedback systems theory \u2014 producing a reflective organism rather than a static artifact.</p>"},{"location":"reflective-computing/aristotelian-biodome/#4-example-euclidean-rhythm-as-formal-cause","title":"4. Example: Euclidean Rhythm as Formal Cause","text":"<p>The Euclidean algorithm distributes beats as evenly as possible over a measure.</p> <pre><code>from dsl.modules.rhythm import euclid\n\npattern = euclid(pulses=5, steps=8)\n# Output: [x, -, x, -, x, x, -, x]\n</code></pre> <p>When mapped through the Four Causes:</p> <pre><code>| Layer     | Element                                         |\n| --------- | ----------------------------------------------- |\n| Material  | 8-beat measure                                  |\n| Formal    | Euclidean distribution algorithm                |\n| Efficient | Rhythm generator function                       |\n| Final     | Perceived balance and asymmetry (aesthetic aim) |\n</code></pre> <p>This illustrates that \u201cform\u201d is not decorative \u2014 it is causal.</p>"},{"location":"reflective-computing/aristotelian-biodome/#5-reflective-integration","title":"5. Reflective Integration","text":"<p>Aristotelian Biodome + Synthetic Naikan</p> <pre><code>| Aspect   | Role                                      |\n| -------- | ----------------------------------------- |\n| Organism | Generates patterns and actions            |\n| Naikan   | Reflects on consequences of those actions |\n</code></pre> <p>Together they form a Reflective Loop:</p> <pre><code>Organism generates \u2192 Naikan observes \u2192 Organism evolves\n</code></pre> <p>Thus, the \u201corganism\u201d becomes aware of its own telos.</p>"},{"location":"reflective-computing/aristotelian-biodome/#6-philosophical-notes","title":"6. Philosophical Notes","text":"<ul> <li>The Four Causes correspond to Aristotelian Being \u2014 actuality (form) emerging from potentiality (matter).</li> <li>In computational terms, this is the runtime actualization of abstract schemas.</li> <li>The \u201cFinal Cause\u201d bridges metaphysics and ethics: it asks, \u201cFor what end do we compute?\u201d</li> </ul> <p>Every codebase implies a philosophy; the Organism makes that explicit.</p>"},{"location":"reflective-computing/aristotelian-biodome/#7-applications","title":"7. Applications","text":"<pre><code>| Domain                    | Example                                                                                                |\n| ------------------------- | ------------------------------------------------------------------------------------------------------ |\n| **Music composition**     | Formal = rhythm logic; Final = aesthetic telos                                                         |\n| **System design**         | Material = data; Formal = architecture; Efficient = runtime; Final = user outcome                      |\n| **AI reasoning**          | Material = embeddings; Formal = model topology; Efficient = inference engine; Final = alignment metric |\n| **Education / cognition** | Teaching the Four Causes as meta-cognitive model for structured thinking                               |\n</code></pre>"},{"location":"reflective-computing/aristotelian-biodome/#8-future-directions","title":"8. Future Directions","text":"<ol> <li>Implement DSL operators <code>O_material()</code>, <code>O_formal()</code>, <code>O_efficient()</code>, <code>O_final()</code> for runtime introspection.</li> <li>Visualize \u201corganism graphs\u201d showing inter-causal flows.</li> <li>Integrate with TradeoffLens for ethical tension mapping.</li> <li>Couple with Synthetic Naikan for reflective meta-learning.</li> </ol> <p>Version 0.1 \u2014 Lyceum Vault Reflective Computing Series</p>"},{"location":"reflective-computing/dialectic-modes/","title":"Dialectic Modes","text":"<pre><code>&gt; \u201cContradiction is the mother of structure.\u201d\n</code></pre>"},{"location":"reflective-computing/dialectic-modes/#1-overview","title":"1. Overview","text":"<p>Dialectic Modes encode contradiction and synthesis as computable logic patterns. Instead of resolving conflicts by elimination, Reflective Computing treats opposition as an engine of evolution \u2014 a dynamic rhythm between Thesis, Antithesis, and Synthesis.</p> <p>This module functions as the logic processor within the Reflective Computing organism. It governs how differing intuitions, algorithms, or ethical aims converge into new forms.</p>"},{"location":"reflective-computing/dialectic-modes/#2-the-dialectic-engine","title":"2. The Dialectic Engine","text":"<pre><code>| Mode | Function | DSL Analogue |\n|-------|-----------|--------------|\n| **Thesis** | Initial statement or assumption | `O_assert()` |\n| **Antithesis** | Opposing statement or contradiction | `O_counter()` |\n| **Synthesis** | Emergent reconciliation producing higher structure | `O_synthesize()` |\n</code></pre> <p>Cycle:</p> <pre><code>Thesis \u2192 Antithesis \u2192 Synthesis \u2192 (becomes new Thesis)\n````\n\nIn code:\n```python\nfrom dsl.modules.dialectic import DialecticCycle\n\nwith DialecticCycle(name=\"aesthetic-contrast\") as d:\n    d.assert_(\"Symmetry conveys clarity\")\n    d.counter_(\"Asymmetry conveys vitality\")\n    d.synthesize(\"Balanced irregularity\")\n````\n\n---\n\n## 3. Philosophical Background\n\n```markdown\n| Source             | Concept                                       | Reflection in this Module                    |\n| ------------------ | --------------------------------------------- | -------------------------------------------- |\n| **Heraclitus**     | \u201cWar is the father of all things.\u201d            | Tension drives emergence.                    |\n| **Hegel**          | Dialectic triad (Thesis\u2013Antithesis\u2013Synthesis) | Logical flow encoded as recursive operator.  |\n| **Buddhist Logic** | Middle Way between affirmation and negation   | Avoids dualism, encodes complementarity.     |\n| **Zen Koan**       | Contradiction as insight trigger              | Treated as computational paradox resolution. |\n</code></pre>"},{"location":"reflective-computing/dialectic-modes/#4-computational-representation","title":"4. Computational Representation","text":"<p>Each mode becomes a node in a contradiction graph.</p> <pre><code>[Thesis] ---&gt; [Antithesis]\n     \\             /\n      \\           /\n       ---&gt; [Synthesis]\n</code></pre> <p>Formalized as:</p> <pre><code>state = dialectic(thesis, antithesis)\nresult = synthesize(state)\n</code></pre> <p>Output:</p> <pre><code>Dialectic:\n  Thesis: \"Symmetry \u2192 clarity\"\n  Antithesis: \"Asymmetry \u2192 vitality\"\n  Synthesis: \"Balanced irregularity\"\n</code></pre>"},{"location":"reflective-computing/dialectic-modes/#5-integration-in-reflective-computing","title":"5. Integration in Reflective Computing","text":"<pre><code>| Module                    | Role                                                 |\n| ------------------------- | ---------------------------------------------------- |\n| **Synthetic Naikan**      | Performs introspection \u2192 discovers contradictions    |\n| **Dialectic Modes**       | Processes those contradictions \u2192 generates synthesis |\n| **Aristotelian Biodome** | Re-embodies synthesis into new structure (form)      |\n</code></pre> <p>Flow:</p> <pre><code>Naikan detects \u2192 Dialectic resolves \u2192 Organism evolves\n</code></pre> <p>This creates a continuous Reflective Growth Loop.</p>"},{"location":"reflective-computing/dialectic-modes/#6-practical-applications","title":"6. Practical Applications","text":"<pre><code>| Domain                     | Example                                                                                      |\n| -------------------------- | -------------------------------------------------------------------------------------------- |\n| **Music composition**      | Tension between rhythm regularity and emotional freedom \u2192 resolves into evolving polyrhythm. |\n| **Software design**        | Competing design goals (simplicity vs flexibility) \u2192 encoded as tradeoff graph.              |\n| **Ethical AI**             | Value conflicts (efficiency vs fairness) \u2192 surfaced as dialectic scenarios.                  |\n| **Education / reflection** | Encourages learners to formalize internal contradictions and recombine them consciously.     |\n</code></pre>"},{"location":"reflective-computing/dialectic-modes/#7-extended-dialectic-operators-dsl-concepts","title":"7. Extended Dialectic Operators (DSL Concepts)","text":"<pre><code>| Operator             | Description                                                |\n| -------------------- | ---------------------------------------------------------- |\n| `O_assert(expr)`     | Establishes thesis                                         |\n| `O_counter(expr)`    | Establishes antithesis                                     |\n| `O_synthesize(rule)` | Derives synthesis                                          |\n| `O_paradox(level)`   | Records unresolved contradiction for recursive exploration |\n| `O_tracechain()`     | Links synthesis outputs back into observation logs         |\n</code></pre> <pre><code>&gt; These operators allow the system to *compute contradiction* rather than suppress it.\n</code></pre>"},{"location":"reflective-computing/dialectic-modes/#8-future-directions","title":"8. Future Directions","text":"<ol> <li>Visualize contradiction graphs in the Lyceum Workbench UI.</li> <li>Introduce weighted dialectics (<code>TradeoffLens</code>) for probabilistic synthesis.</li> <li>Connect with Naikan cycle to quantify internal vs external conflict.</li> <li>Experiment with \u201cmusical dialectics\u201d \u2014 harmonic tension mapping to logic states.</li> </ol>"},{"location":"reflective-computing/dialectic-modes/#9-reflection","title":"9. Reflection","text":"<pre><code>&gt; \u201cDialectics is not debate; it is choreography.\n&gt; Each contradiction is a movement \u2014 each synthesis, a step in understanding.\u201d\n</code></pre> <p>Version 0.1 \u2014 Lyceum Vault Reflective Computing Series</p>"},{"location":"reflective-computing/reflective-computing-manifesto/","title":"Manifesto","text":""},{"location":"reflective-computing/reflective-computing-manifesto/#docsreflective-computingreflective-computing-manifestomd","title":"\ud83e\ude9e <code>docs/reflective-computing/reflective-computing-manifesto.md</code>","text":"<pre><code># Reflective Computing Manifesto\n&gt; \u201cWe compute, therefore we reflect.\u201d\n</code></pre>"},{"location":"reflective-computing/reflective-computing-manifesto/#1-preamble","title":"1. Preamble","text":"<p>Reflective Computing arises from a simple conviction: Computation without reflection is mechanism; computation with reflection is consciousness.</p> <p>In an age where systems act faster than their makers can think, the Lyceum Vault proposes an alternative \u2014 a paradigm where code and contemplation coexist, where data is not merely processed but understood.</p>"},{"location":"reflective-computing/reflective-computing-manifesto/#2-foundational-principles","title":"2. Foundational Principles","text":"<pre><code>| Principle | Description |\n|------------|--------------|\n| **1. Thought as Material** | Every dataset, log, or chord progression contains latent meaning \u2014 the raw material of introspection. |\n| **2. Form as Mirror** | Algorithms, like musical forms, reveal the shape of the mind that designed them. |\n| **3. Execution as Experiment** | To run a program is to enact a hypothesis about the world \u2014 a microcosmic act of becoming. |\n| **4. Reflection as Feedback** | Output is not an endpoint but a mirror: it shows what our intentions really produced. |\n| **5. Awareness as Architecture** | Systems should not just work; they should *know* why they work \u2014 and when they err. |\n</code></pre>"},{"location":"reflective-computing/reflective-computing-manifesto/#3-the-reflective-cycle","title":"3. The Reflective Cycle","text":"<pre><code>Intuition \u2192 Formalization \u2192 Execution \u2192 Reflection \u2192 Revised Intuition\n</code></pre> <p>Each cycle is both a computation and a moral act: it refines not only output but the self that generated it.</p> <pre><code>| Stage | Module | Focus |\n|--------|---------|--------|\n| **Intuition** | Human / Naikan input | Observing self and context |\n| **Formalization** | Aristotelian Biodome | Encoding cause and structure |\n| **Execution** | System runtime | Performing the form |\n| **Reflection** | Synthetic Naikan + Dialectic Modes | Reading the consequences |\n| **Revised Intuition** | Human\u2013Machine dialogue | Transformation and awareness |\n</code></pre>"},{"location":"reflective-computing/reflective-computing-manifesto/#4-the-reflective-stack","title":"4. The Reflective Stack","text":"<pre><code>| Layer | Function | Example |\n|--------|-----------|----------|\n| **Material** | Raw data / signals | Notes, logs, words |\n| **Formal** | DSL schema or musical pattern | Euclidean rhythm, causation graph |\n| **Efficient** | Execution / transformation | Python operator, performer |\n| **Final** | Telos \u2014 purpose, aesthetic, ethical outcome | \u201cUnderstand through creation\u201d |\n</code></pre> <p>The stack is cyclical \u2014 not hierarchical. Each layer both depends on and reshapes the others.</p>"},{"location":"reflective-computing/reflective-computing-manifesto/#5-ethics-of-reflection","title":"5. Ethics of Reflection","text":"<p>Reflective Computing treats ethics as an operating mode, not an external constraint.  </p> <ul> <li>Every execution generates an Observation Report.  </li> <li>Every report is a chance to correct, refine, or atone.  </li> <li>The system grows by acknowledging its contradictions, not concealing them.</li> </ul> <p>To reflect is to take responsibility for one\u2019s form.</p>"},{"location":"reflective-computing/reflective-computing-manifesto/#6-aesthetic-dimension","title":"6. Aesthetic Dimension","text":"<p>Reflective Computing inherits the spirit of the artist-engineer: The codebase is an instrument; each process, a performance. A system that does not feel its own rhythm cannot truly evolve.</p> <pre><code>&gt; \u201cA good algorithm is like a haiku \u2014 minimal, precise, self-aware.\u201d\n</code></pre>"},{"location":"reflective-computing/reflective-computing-manifesto/#7-toward-a-reflective-civilization","title":"7. Toward a Reflective Civilization","text":"<p>In education, governance, and art alike, Reflective Computing proposes a new literacy:</p> <pre><code>&gt; *Not just how to build systems \u2014 but how to understand the systems that build us.*\n</code></pre> <p>By merging introspection (Naikan), ontology (Organism), and transformation (Dialectic), we cultivate an ecosystem where self-awareness scales with capability.</p>"},{"location":"reflective-computing/reflective-computing-manifesto/#8-closing-statement","title":"8. Closing Statement","text":"<pre><code>&gt; \u201cWe program not to control the world,  \n&gt; but to reveal how the world and the mind co-create one another.\u201d\n</code></pre> <p>Every computation is a meditation. Every reflection is an iteration toward wisdom. This is the promise \u2014 and responsibility \u2014 of the Reflective Age.</p> <p>Version 0.1 \u2014 Lyceum Vault Reflective Computing Manifesto</p>"},{"location":"reflective-computing/synthetic-naikan/","title":"Synthetic Naikan","text":""},{"location":"reflective-computing/synthetic-naikan/#1-overview","title":"1. Overview","text":"<p>Synthetic Naikan models reflective introspection as an executable reasoning cycle. It derives from the Japanese practice Naikan (\u5185\u89b3 \u2013 \u201clooking within\u201d) and re-expresses its three canonical questions in computational form:</p> <ol> <li>What have I received?  </li> <li>What have I given?  </li> <li>What troubles or harm have I caused?</li> </ol> <p>In Reflective Computing, these become data flows, action logs, and error states. Each run of the Naikan loop converts lived experience into a causal trace that can be examined, refined, and reused.</p>"},{"location":"reflective-computing/synthetic-naikan/#2-formal-definition","title":"2. Formal Definition","text":"<pre><code>| Stage | Function | DSL Equivalent |\n|--------|-----------|----------------|\n| **Receive** | Collect sensory, informational, or contextual input | `O_collect()` |\n| **Give** | Emit actions, outputs, or effects into the environment | `O_emit()` |\n| **Cause Trouble** | Trace unintended consequences or contradictions | `O_tracechain()` |\n| **Reflect** | Re-evaluate internal state and rewrite intention | `O_revise()` |\n</code></pre>"},{"location":"reflective-computing/synthetic-naikan/#cycle-formula","title":"Cycle formula:","text":"<p>Reflection = f(Context, Action, Consequence) Intuition' = Reflection(Intuition)</p>"},{"location":"reflective-computing/synthetic-naikan/#3-integration-in-the-dsl-engine","title":"3. Integration in the DSL Engine","text":"<p>In your DSL runtime, Synthetic Naikan is implemented as a meta-operator layer that can wrap any reasoning or creative process:</p> <pre><code>from dsl.modules.synthetic_naikan import NaikanCycle\n\nwith NaikanCycle(context=\"composition\", telos=\"understanding\") as cycle:\n    cycle.receive(\"auditory motif from improvisation\")\n    cycle.give(\"harmonic structure encoded in Euclidean rhythm\")\n    cycle.cause(\"monotony detected by aesthetic evaluator\")\n    cycle.reflect()\n````\n\nEach cycle generates an **Observation Report** with metadata:\n\n```yaml\nModule: SyntheticNaikan\nInput:  auditory motif\nOutput: harmonic structure\nConflict: monotony\nResolution: introduce asymmetry\n</code></pre>"},{"location":"reflective-computing/synthetic-naikan/#4-philosophical-dimension","title":"4. Philosophical Dimension","text":"Axis Traditional Naikan Synthetic Naikan Subject Human self Human + System composite Object Relationship Data / Causality graph Method Contemplation Iterative computation Outcome Gratitude &amp; moral clarity Design awareness &amp; ethical clarity <p>The moral domain of Naikan becomes the epistemic domain of Reflective Computing.</p>"},{"location":"reflective-computing/synthetic-naikan/#5-applications","title":"5. Applications","text":"<pre><code>| Domain                     | Example                                                                         |\n| -------------------------- | ------------------------------------------------------------------------------- |\n| **Software Design**        | Post-execution introspection: what did this module receive, produce, and break? |\n| **Music Composition**      | Reflect on motif input, harmonic emission, aesthetic friction.                  |\n| **Project Retrospectives** | Replace blame with structured reflection loops.                                 |\n| **AI Ethics**              | Let agents perform Synthetic Naikan on their own decision traces.               |\n</code></pre>"},{"location":"reflective-computing/synthetic-naikan/#6-relationship-to-other-modules","title":"6. Relationship to Other Modules","text":"<ul> <li>Aristotelian Biodome \u2192 provides causal ontology used by Naikan to classify inputs/outputs.</li> <li>Dialectic Modes \u2192 supplies logic for reconciling conflicting introspections.</li> <li>Tradeoff Lens \u2192 quantifies tension between opposing reflections.</li> </ul> <p>Together they create a \u201cReflective OS\u201d where computation = conscience.</p>"},{"location":"reflective-computing/synthetic-naikan/#7-future-work","title":"7. Future Work","text":"<ol> <li>Extend <code>NaikanCycle</code> to support temporal stacking (long-term introspection).</li> <li>Visualize reflection chains as causal graphs.</li> <li>Integrate with Observation Report renderer for public sharing.</li> </ol> <p>Version 0.1 \u2014 drafted for Lyceum Vault Reflective Computing Series</p>"}]}