{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Leo's Lyceum Vault","text":"<p>Welcome to my public knowledge space \u2014 a living notebook where I publish my projects, documentation, and essays.</p> <p>What is this site?</p> <p>This site is built with MkDocs + Material, deployed on GitHub Pages. Content is plain Markdown so I can draft in Obsidian and publish here easily.</p>"},{"location":"#highlights","title":"Highlights","text":"<ul> <li>Frameworks: Reflective Computing (Naikan, Biodome, Dialectic)</li> <li>Projects: DSL inference app, Lyceum Workbench (Linux + automation + music)</li> <li>Notes: Practical guides (Fedora Samba, Fcitx5, PreSonus cancel guide)</li> <li>Essays: Education narratives, culture/tech reflections</li> </ul> <p>Repo: [<code>https://github.com/leo-nakayama/leo-nakayama.github.io</code>]</p>"},{"location":"meta/content-update-protocol/","title":"\ud83e\udded Lyceum Vault \u2014 Content Update Protocol","text":"<p>Authoring and publishing workflow guide</p>"},{"location":"meta/content-update-protocol/#purpose","title":"Purpose","text":"<p>To maintain a consistent, traceable rhythm for updating the Lyceum Vault. This protocol describes how new ideas \u2014 notes, essays, or projects \u2014 move from draft to publication.</p>"},{"location":"meta/content-update-protocol/#1-draft-phase-local","title":"1\ufe0f\u20e3 Draft Phase (Local)","text":"<ol> <li>Decide category</li> <li><code>docs/notes/</code> \u2192 technical or conceptual memo  </li> <li><code>docs/essays/</code> \u2192 reflective or philosophical text  </li> <li> <p><code>docs/projects/</code> \u2192 documentation of a running or planned system</p> </li> <li> <p>Create Markdown file</p> </li> </ol> <pre><code>   cd docs/notes\n   touch new-topic.md\n````\n\nWrite freely in Obsidian or a Markdown editor.\nInclude a `# Title`, sections, and (if relevant) diagrams or code.\n\n3. **Local preview**\n\n```bash\n   mkdocs serve\n</code></pre> <p>Access at http://127.0.0.1:8000 to verify layout and internal links.</p>"},{"location":"meta/content-update-protocol/#2-integration-phase","title":"2\ufe0f\u20e3 Integration Phase","text":"<ol> <li>Edit navigation in <code>mkdocs.yml</code>:</li> </ol> <p><code>yaml    nav:      - Notes:          - New Topic Title: notes/new-topic.md</code> 2. Check for broken links</p> <p><code>bash    mkdocs build --strict</code></p> <p>If no warnings \u2192 proceed.</p>"},{"location":"meta/content-update-protocol/#3-publish-phase","title":"3\ufe0f\u20e3 Publish Phase","text":"<ol> <li>Commit and push</li> </ol> <p><code>bash    git add .    git commit -m \"Add: new note on &lt;topic&gt;\"    git push</code> 2. The GitHub Actions workflow runs automatically:</p> <ul> <li>Builds the site</li> <li> <p>Deploys it to <code>gh-pages</code></p> </li> <li> <p>Within 1\u20132 minutes, the live site updates at    <code>https://&lt;username&gt;.github.io/lyceum-vault/</code></p> </li> </ul>"},{"location":"meta/content-update-protocol/#4-collaboration-phase-with-gpt","title":"4\ufe0f\u20e3 Collaboration Phase (with GPT)","text":"<p>When co-developing new modules or essays:</p> <ol> <li>Zip current repo (excluding <code>/site</code>):</li> </ol> <p><code>bash    zip -r lyceum-vault-update.zip docs mkdocs.yml .github</code> 2. Upload here (ChatGPT session).</p> <ol> <li> <p>GPT will:</p> </li> <li> <p>Read the current structure</p> </li> <li>Suggest new folder paths and filenames</li> <li>Draft content or update navigation automatically</li> </ol>"},{"location":"meta/content-update-protocol/#5-maintenance-phase","title":"5\ufe0f\u20e3 Maintenance Phase","text":"<pre><code>| Task               | Frequency           | Command / Note                          |\n| ------------------ | ------------------- | --------------------------------------- |\n| Dependency updates | Monthly             | `pip install -U mkdocs mkdocs-material` |\n| Local link audit   | Before big releases | `mkdocs build --strict`                 |\n| Backup             | Continuous          | Push repo to GitHub (auto backup)       |\n</code></pre>"},{"location":"notes/Configuring-SSH-Key-based-Authentication/","title":"Configuring SSH Key-based Authentication","text":""},{"location":"notes/Configuring-SSH-Key-based-Authentication/#create-an-ssh-key-pair","title":"Create an SSH Key-pair","text":"<p><code>ssh-keygen [-t dsa | ecdsa | ecdsa-sk | ed25519 | ed25519-sk | rsa] [-f output_keyfile] [-C comment]</code> generates an ssh key-pair with a specified type [-t] with a file name [-f]. A file name such as \"id_ed25519_rhel9_server\" could be used for an optional file name extension. </p> <pre><code>ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519&lt;OPTIONAL_NAME&gt; -C \"&lt;USER&gt;@$&lt;HOST&gt;\"\n</code></pre>"},{"location":"notes/Configuring-SSH-Key-based-Authentication/#add-private-key-identity-to-the-openssh-authentication-agent","title":"Add Private Key Identity to the OpenSSH Authentication Agent","text":"<p><code>ssh-add</code> adds private key identities to the OpenSSH authentication agent. Skip this process of addin the identity to the agent when a passphrase was not set during the key creation stage using the <code>ssh-keygen</code>. </p> <p>Ensure the ssh-agent is activated</p> <pre><code>eval \"$(ssh-agent -s)\"\n</code></pre> <p>Add an ssh private key identity to the agent</p> <pre><code>ssh-add ~/.ssh/id_ed25519&lt;OPTIONAL_NAME&gt;\n</code></pre>"},{"location":"notes/Configuring-SSH-Key-based-Authentication/#copy-the-public-key-to-host","title":"Copy the Public Key to Host","text":"<p><code>ssh-copy-id -i [identity_file]</code> copies public key to the targeted HOST as USER.</p> <pre><code>ssh-copy-id -i ~/.ssh/id_ed25519&lt;OPTIONAL_NAME&gt;.pub &lt;USER&gt;@&lt;HOST&gt;\n</code></pre> <p>For hosts not accepting <code>ssh-copy-id</code> such as GitHub.com, copy the public key manually. For GitHub,as an example, use <code>cat</code> and paste the public key manually on GitHub \u2192 Settings \u2192 SSH and GPG keys \u2192 New SSH key.</p> <pre><code>cat ~/.ssh/id_ed25519&lt;OPTIONAL_NAME&gt;.pub\n</code></pre>"},{"location":"notes/Configuring-SSH-Key-based-Authentication/#set-permissions","title":"Set Permissions","text":"<ul> <li><code>chmod 700</code> # for .ssh directory</li> <li><code>chmod 600</code> # for config, private key files</li> <li><code>chmod 644</code> # for public key files</li> </ul> <pre><code>chmod 700 ~/.ssh\nchmod 600 ~/.ssh/config ~/.ssh/id_ed25519_*\nchmod 644 ~/.ssh/*.pub\n</code></pre>"},{"location":"notes/Configuring-SSH-Key-based-Authentication/#test-connections","title":"Test Connections","text":"<pre><code>ssh -T git@github.com    # Expect GitHub greeting \"Hi &lt;USER_NAME&gt;...\"\nssh &lt;HOST&gt;                # Should log into your host\n</code></pre>"},{"location":"notes/Create-Basic-Python-Environment-then-start-from-red/","title":"Create Basic Python Environment (then start from red)","text":"<p>A basic Python envivonment setup using <code>venv</code>, <code>pip</code>, <code>ruff</code>, <code>mypy</code>, and <code>pytest</code>.</p>"},{"location":"notes/Create-Basic-Python-Environment-then-start-from-red/#start-with-creating-a-new-venv-folder","title":"Start with creating a new venv folder","text":"<pre><code>mkdir test\ncd test/\npython3 -m venv .venv\nsource .venv/bin/activate\n</code></pre> <p>The begining of the prompt line shows () to indicate the venv is active.  <pre><code>(.venv) \u2699leo@g16:~/Projects/test$\n</code></pre> <p>Notice that this perenthesis with  inside does not gurantee the venv is working as ecpected. For example, if venv is not actually activated, the command line <code>python3 foo.py</code> can accidentally run the system wide python3 (<code>/usr/bin/python3 foo.py</code>), which is not desirable. Use <code>which &lt;COMMAND&gt;</code> to ensure <code>.venv/bin/&lt;COMMAND&gt;</code> is activated."},{"location":"notes/Create-Basic-Python-Environment-then-start-from-red/#upgrade-pip-verify-the-venv-is-activated","title":"Upgrade pip. Verify the venv is activated.","text":"<p>If there is a requirement.txt</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>(Else)</p> <pre><code>pip install --upgrade pip\nwhich pip &amp;&amp; which python3\n# /home/leo/Projects/test/.venv/bin/pip\n# /home/leo/Projects/test/.venv/bin/python3\n</code></pre>"},{"location":"notes/Create-Basic-Python-Environment-then-start-from-red/#install-ruff-mypy-and-pytest","title":"Install ruff, mypy, and pytest","text":"<pre><code>which pip &amp;&amp; which python3 # make sure venv is activated\n</code></pre> <p>Only if venv activation is verified:</p> <pre><code>pip install ruff\npip install mypy\npip install pytest\n</code></pre>"},{"location":"notes/Create-Basic-Python-Environment-then-start-from-red/#start-coding-by-testing","title":"Start coding by testing","text":"<p>Start by test.py then .py (red-green/TDD)</p> <pre><code>(.venv) \u2699leo@g16:~/Projects/test$ vim test_one.py\n(.venv) \u2699leo@g16:~/Projects/test$ mypy test_one.py\nSuccess: no issues found in 1 source file\n(.venv) \u2699leo@g16:~/Projects/test$ pytest -q\n.                                                                       [100%]\n1 passed in 0.00s\n\n(.venv) \u2699leo@g16:~/Projects/test$ vim main.py\n(.venv) \u2699leo@g16:~/Projects/test$ mypy .\nSuccess: no issues found in 2 source files\n</code></pre>"},{"location":"notes/Create-Basic-Python-Environment-then-start-from-red/#freeze-requirementstxt","title":"Freeze requirements.txt","text":"<pre><code>pip freeze &gt; requirements.txt\n</code></pre>"},{"location":"notes/Fedora_MAC_Address_Randomization_Issue/","title":"\ud83e\udde0 Fedora MAC Address Randomization \u2014 Troubleshooting Log","text":"<p>Context: While connecting from <code>g16</code> (Kubuntu) to <code>e14</code> (Fedora) via SSH, the e14 host became unreachable at its usual IP (<code>192.168.1.12</code>). Investigation revealed Fedora\u2019s default MAC randomization caused a new IP (<code>192.168.1.15</code>) to be assigned, breaking router DHCP binding and SSH connectivity.</p>","tags":["Fedora","NetworkManager","MAC","SSH","LyceumNotes"]},{"location":"notes/Fedora_MAC_Address_Randomization_Issue/#1-symptoms","title":"\ud83e\udde9 1. Symptoms","text":"Command Result Interpretation <code>ping e14</code> (from g16) <code>Destination Host Unreachable</code> No route to previous IP <code>nslookup e14</code> <code>192.168.1.12</code> Name resolution still cached <code>ssh leo@e14</code> <code>No route to host</code> TCP unreachable <code>ip addr show wlp3s0</code> (on e14) <code>link/ether 0a:8c:57:a9:8b:ad permaddr aa:aa:aa:aa:aa:aaf</code> Randomized MAC detected <p>Root Cause: Fedora\u2019s <code>NetworkManager</code> uses a randomized Wi-Fi MAC address each connection (<code>wifi.cloned-mac-address=random</code>), invalidating the router\u2019s static IP binding.</p>","tags":["Fedora","NetworkManager","MAC","SSH","LyceumNotes"]},{"location":"notes/Fedora_MAC_Address_Randomization_Issue/#2-corrective-actions","title":"\u2699\ufe0f 2. Corrective Actions","text":"","tags":["Fedora","NetworkManager","MAC","SSH","LyceumNotes"]},{"location":"notes/Fedora_MAC_Address_Randomization_Issue/#step-1-disable-random-mac-for-the-wi-fi-connection","title":"Step 1 \u2014 Disable Random MAC for the Wi-Fi Connection","text":"<pre><code>nmcli connection show\nsudo nmcli connection modify \"&lt;SSID&gt;\" 802-11-wireless.cloned-mac-address permanent\nsudo nmcli connection down \"&lt;SSID&gt;\"\nsudo nmcli connection up \"&lt;SSID&gt;\"\n````\n\nVerify:\n\n```bash\nip link show wlp3s0\n</code></pre> <p>\u2705 You should now see the hardware MAC.</p>","tags":["Fedora","NetworkManager","MAC","SSH","LyceumNotes"]},{"location":"notes/Fedora_MAC_Address_Randomization_Issue/#step-2-optional-global-policy-for-all-wi-fi","title":"Step 2 \u2014 Optional Global Policy (for all Wi-Fi)","text":"<p>Create <code>/etc/NetworkManager/conf.d/10-disable-wifi-random.conf</code>:</p> <pre><code>[device]\nwifi.scan-rand-mac-address=no\n\n[connection]\nwifi.cloned-mac-address=permanent\n</code></pre> <p>Reload:</p> <pre><code>sudo systemctl restart NetworkManager\n</code></pre>","tags":["Fedora","NetworkManager","MAC","SSH","LyceumNotes"]},{"location":"notes/Fedora_MAC_Address_Randomization_Issue/#step-3-restore-router-binding","title":"Step 3 \u2014 Restore Router Binding","text":"<p>On your router, bind:</p> <pre><code>aa:aa:aa:aa:aa:aa \u2192 192.168.1.12\n</code></pre> <p>This ensures the IP stays fixed across reboots and OS reinstalls.</p>","tags":["Fedora","NetworkManager","MAC","SSH","LyceumNotes"]},{"location":"notes/Fedora_MAC_Address_Randomization_Issue/#3-verification-script-check-macsh","title":"\ud83e\uddf0 3. Verification Script: <code>check-mac.sh</code>","text":"<p>A utility script to verify if Fedora is still using a randomized MAC.</p> <pre><code>#!/usr/bin/env bash\niface=\"${1:-wlp3s0}\"\n\nif ! ip link show \"$iface\" &amp;&gt;/dev/null; then\n  echo \"\u274c Interface '$iface' not found.\"; exit 1; fi\n\nactive_mac=$(ip -o link show \"$iface\" | awk '{print $17}')\nperm_mac=$(ip -o link show \"$iface\" | grep -o 'permaddr [0-9a-f:]*' | awk '{print $2}')\n[ -z \"$perm_mac\" ] &amp;&amp; perm_mac=$(sudo ethtool -P \"$iface\" 2&gt;/dev/null | awk '{print $3}')\n\necho \"\ud83e\udde0 Interface:  $iface\"\necho \"\ud83d\udd39 Active MAC: $active_mac\"\necho \"\ud83d\udd38 Permanent:  $perm_mac\"\n\nif [ \"$active_mac\" != \"$perm_mac\" ]; then\n  echo \"\ud83d\udea8 Warning: active MAC differs \u2014 randomization is still active!\"\n  echo \"\ud83d\udc49 Run: nmcli connection modify \\\"&lt;SSID&gt;\\\" 802-11-wireless.cloned-mac-address permanent\"\nelse\n  echo \"\u2705 OK: active MAC matches hardware MAC.\"\nfi\n</code></pre>","tags":["Fedora","NetworkManager","MAC","SSH","LyceumNotes"]},{"location":"notes/Fedora_MAC_Address_Randomization_Issue/#4-verification-flow","title":"\ud83d\udd0d 4. Verification Flow","text":"Step Command Expected Result Check MACs <code>check-mac.sh wlp3s0</code> Same active/permanent MAC Router lease <code>grep e14 /var/lib/dhcp/dhclient*.lease</code> Confirms 192.168.1.12 Ping test <code>ping -c 4 e14</code> Replies successfully SSH test <code>ssh leo@e14</code> Connects without issue","tags":["Fedora","NetworkManager","MAC","SSH","LyceumNotes"]},{"location":"notes/Fedora_MAC_Address_Randomization_Issue/#reflection-lyceum-notes","title":"\ud83d\udca1 Reflection (Lyceum Notes)","text":"<ul> <li>Material Cause (M): Fedora Wi-Fi hardware with MAC randomization feature</li> <li>Formal Cause (F): NetworkManager configuration rules and router DHCP bindings</li> <li>Efficient Cause (E): Fedora default privacy setting altering MAC per session</li> <li>Final Cause (T): Restoring network stability and predictable SSH routing</li> </ul> <p>Observation: Modern OS defaults emphasize privacy (randomized MACs) over LAN persistence. In controlled lab environments like the Lyceum Home Lab, predictability outweighs anonymity \u2014 thus disabling MAC randomization aligns with system telos: \u201cstable reflective connectivity.\u201d</p> <p>\u2705 Outcome:</p> <ul> <li>e14 now consistently reports its hardware MAC.</li> <li>Router rebinds static IP <code>192.168.1.12</code>.</li> <li>g16 \u2194 e14 SSH restored.</li> <li>Verified using <code>check-mac.sh</code>.</li> </ul>","tags":["Fedora","NetworkManager","MAC","SSH","LyceumNotes"]},{"location":"notes/console-terminal-shell/","title":"\ud83e\udded Console, Terminal, Shell, Job, and Process \u2014 An Aristotelian View","text":""},{"location":"notes/console-terminal-shell/#1-console-vs-terminal","title":"1. Console vs. Terminal","text":""},{"location":"notes/console-terminal-shell/#console-physical-context","title":"\ud83e\uddf1 Console (Physical Context)","text":"<p>Historically, the console referred to the physical device connected directly to a mainframe \u2014 a monitor and keyboard enabling a human operator to interact with the system. Today, it often denotes: - The primary system I/O interface (e.g., Linux virtual consoles like <code>Ctrl+Alt+F2</code>). - The administrative control interface (e.g., \u201csystem console\u201d or \u201cAWS console\u201d).</p> <p>Analogy: The console is the room where human and machine meet.</p>"},{"location":"notes/console-terminal-shell/#terminal-logical-interface","title":"\ud83d\udcbb Terminal (Logical Interface)","text":"<p>The terminal is software that emulates the console in modern systems. A terminal emulator (e.g., Konsole, GNOME Terminal, xterm, or SSH client) provides a text-based interface for input and output between human and system.</p> <p>It displays text, handles keyboard input, and communicates with the shell process running within it via standard input/output streams.</p> <p>Analogy: The terminal is the window through which you see and speak to the computer.</p>"},{"location":"notes/console-terminal-shell/#2-shell","title":"2. Shell","text":""},{"location":"notes/console-terminal-shell/#definition","title":"\ud83d\udd39 Definition","text":"<p>A shell is a command interpreter \u2014 a program that reads commands typed by the user, interprets them, and asks the operating system to execute them. Examples: <code>bash</code>, <code>zsh</code>, <code>fish</code>, <code>sh</code>.</p> <p>The shell is the linguistic interface between human intention and machine operation.</p> <p>Analogy: The shell is your translator, turning human words (commands) into kernel-level system calls.</p>"},{"location":"notes/console-terminal-shell/#a-single-shell-instance","title":"\ud83d\udd39 A Single Shell Instance","text":"<p>When you open a terminal, it launches one shell process. That instance: - Maintains environment variables and current directory. - Manages all jobs created within it. - Exists until you exit it, closing the session.</p> <p>Each terminal window equals one isolated universe of a single shell instance \u2014 with its own environment, process group, and history.</p>"},{"location":"notes/console-terminal-shell/#3-job-and-process","title":"3. Job and Process","text":""},{"location":"notes/console-terminal-shell/#process","title":"\ud83e\udde9 Process","text":"<p>A process is an instance of a running program, managed by the operating system kernel. Each process has: - A unique PID. - Its own memory space. - A parent process (the process that started it).</p> <p>Example:</p> <pre><code>python3 script.py\n````\n\ncreates a new process running the `python3` program.\n\n---\n\n### \ud83d\udd04 Job\n\nA **job** is a logical group of one or more processes launched from a single shell command line.\nThe shell assigns job IDs (`%1`, `%2`, etc.) and lets you control them as a group.\n\nExample:\n\n```bash\nsleep 60 &amp;\n# one job, one process\n\nls | grep txt\n# one job, two processes (pipeline)\n</code></pre> <p>Jobs can run in foreground or background, be suspended, resumed, or terminated \u2014 all under the shell\u2019s supervision.</p>"},{"location":"notes/console-terminal-shell/#4-aristotelian-four-causes","title":"4. Aristotelian Four Causes","text":"Cause Applied Concept Description Material Cause (M) Hardware &amp; OS resources The circuits, CPU, memory, and kernel \u2014 the \u201cmatter\u201d of computation. Formal Cause (F) Console \u2194 Terminal \u2194 Shell architecture The form or structure enabling human\u2013machine communication. Efficient Cause (E) The human operator issuing commands You \u2014 the initiating agent of every computational action. Final Cause (T) The expectation of result The purpose or telos \u2014 transforming human intention into tangible output. <p>Every computing act begins with human telos, passes through linguistic form (shell commands), mobilizes material resources (hardware and OS), and manifests as observable results (console output).</p>"},{"location":"notes/console-terminal-shell/#5-the-humanmachine-cycle","title":"5. The Human\u2013Machine Cycle","text":"<ol> <li>You (Efficient Cause) open a terminal.</li> <li>The terminal (Formal Cause) provides an interface.</li> <li>The shell (Formal + Efficient hybrid) interprets your words.</li> <li>The system (Material Cause) executes processes (jobs).</li> <li>The result (Final Cause) fulfills your intention.</li> </ol> <pre><code>[Human Intent] \u2192 [Shell Command] \u2192 [Process Execution] \u2192 [Result Shown]\n       \u2191                    \u2193\n   Efficient Cause     Material/ Formal\n       \u2191                    \u2193\n      [Console \u2194 Terminal] (medium)\n                 \u2193\n      Final Cause = \"Result that satisfies human purpose\"\n</code></pre>"},{"location":"notes/console-terminal-shell/#6-this-is-why-ssh-is-implemented","title":"6. This is why SSH is implemented","text":""},{"location":"notes/console-terminal-shell/#secure-shell-ssh-as-an-extension-of-the-consoleterminalshell-model","title":"\ud83d\udd10 Secure SHell (SSH) as an Extension of the Console\u2013Terminal\u2013Shell Model","text":"<p>SSH \u2014 Secure Shell \u2014 is not a different species of tool; it is the natural evolution of the same architecture described above.</p> Layer Function in SSH Context Console (Physical) The remote machine\u2019s physical console \u2014 the system\u2019s original I/O interface \u2014 may be hundreds of kilometers away. Terminal (Virtual) The SSH client on your local machine emulates a terminal session across a network, securely tunneling I/O streams. Shell (Linguistic) When the SSH server accepts your login, it launches a shell instance (e.g., <code>/bin/bash</code>) for you \u2014 just like a local terminal. Jobs &amp; Processes Commands you issue over SSH spawn processes on the remote host. These are remote jobs managed by your shell session. Telos (Purpose) The purpose remains unchanged: to execute commands and gain meaningful results \u2014 but now distributed across space via encryption."},{"location":"notes/console-terminal-shell/#philosophical-continuity","title":"\ud83e\udde0 Philosophical Continuity","text":"<p>SSH extends the Formal Cause (the structure of interaction) beyond the local boundary. It ensures that:</p> <ul> <li>Material Cause (hardware) can reside elsewhere.</li> <li>Efficient Cause (you) remains the same.</li> <li>Final Cause (desired result) is achieved remotely.</li> <li>Formal Cause is preserved through secure encryption and protocol design.</li> </ul> <p>In essence:</p> <p>SSH is the continuation of human\u2013machine dialogue across distance, where security preserves integrity of intention, and encryption guards the telos of computation.</p>"},{"location":"notes/console-terminal-shell/#summary","title":"\ud83e\udeb6 Summary","text":"<p>All modern computing interfaces \u2014 console, terminal, shell, SSH \u2014 are expressions of the same ancient logic:</p> <p>Matter needs Form; Form needs an Agent; the Agent acts for a Purpose.</p> <p>SSH simply extends this chain through space and networks while maintaining the same metaphysical grammar: human \u2192 command \u2192 process \u2192 result.</p>"},{"location":"notes/fcitx5-setup/","title":"Fcitx5 Setup (KDE/Ubuntu Quick Notes)","text":""},{"location":"notes/fcitx5-setup/#steps","title":"Steps","text":"<ol> <li>Install: <code>sudo apt install fcitx5 fcitx5-mozc</code> </li> <li>Set input method: <code>im-config -n fcitx5</code> (logout/login)  </li> <li>Ensure env:     <code>bash     echo $XMODIFIERS     echo $GTK_IM_MODULE     echo $QT_IM_MODULE</code></li> <li>Autostart if needed: <code>~/.config/autostart/fcitx5.desktop</code></li> </ol>"},{"location":"notes/fcitx5-setup/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If tray icon missing: verify <code>fcitx5</code> is installed and running</li> <li>Wayland notes: prefer recent KDE Plasma versions</li> </ul>"},{"location":"notes/fedora-samba-permissions/","title":"Fedora/Kubuntu Samba Permissions Cheatsheet","text":""},{"location":"notes/fedora-samba-permissions/#server-selinux-permissions","title":"Server (SELinux + permissions)","text":"<pre><code># Label share dir\nsudo semanage fcontext -a -t samba_share_t \"/srv/share(/.*)?\"\nsudo restorecon -Rv /srv/share\n\n# Group + ACLs\nsudo chgrp -R sambausers /srv/share\nsudo chmod -R 2775 /srv/share\nsudo setfacl -R -m g:sambausers:rwx /srv/share\n</code></pre>"},{"location":"notes/fedora-samba-permissions/#smbconf-snippet","title":"smb.conf (snippet)","text":"<pre><code>[share]\n   path = /srv/share\n   browsable = yes\n   writable = yes\n   valid users = @sambausers\n   force group = sambausers\n   create mask = 0664\n   directory mask = 2775\n</code></pre>"},{"location":"notes/fedora-samba-permissions/#client-mount-etcfstab","title":"Client mount (/etc/fstab)","text":"<pre><code># //server/share  /mnt/share  cifs  credentials=/etc/samba/creds,vers=3.0,iocharset=utf8,uid=&lt;user&gt;,gid=&lt;group&gt;,file_mode=0664,dir_mode=0775  0  0\n</code></pre>"},{"location":"notes/github-actions-vs-aws-cicd/","title":"\u201cMkDocs to GitHub Pages\u201d on AWS (conceptual equivalent)","text":""},{"location":"notes/github-actions-vs-aws-cicd/#diagram-high-level","title":"Diagram (high-level)","text":"<pre><code>You push to main\n        \u2502\n        \u25bc\n CodePipeline (source: GitHub or CodeCommit)\n        \u2502\n   triggers build\n        \u25bc\n   CodeBuild (uses buildspec.yml)\n  - pip install mkdocs/material\n  - mkdocs build \u2192 ./site\n        \u2502\n  artifacts: ./site (static HTML/CSS/JS)\n        \u2502\n        \u25bc\n Deploy stage\n   \u2022 S3 static website bucket (upload ./site)\n   \u2022 (optional) Invalidate CloudFront cache\n</code></pre>"},{"location":"notes/github-actions-vs-aws-cicd/#core-pieces-youd-create","title":"Core pieces you\u2019d create","text":"<ol> <li> <p>S3 bucket for hosting the static site</p> </li> <li> <p>Example: <code>s3://lyceum-vault-site</code></p> </li> <li> <p>Block public access OFF, website hosting ON (or keep private + serve via CloudFront)</p> </li> <li> <p>(Recommended) CloudFront distribution in front of S3</p> </li> <li> <p>Custom domain + TLS via ACM</p> </li> <li> <p>Better latency + cache control</p> </li> <li> <p>CodeBuild project</p> </li> <li> <p>Builds the site using a <code>buildspec.yml</code></p> </li> <li> <p>Outputs <code>site/</code> as artifacts</p> </li> <li> <p>CodePipeline</p> </li> <li> <p>Source: GitHub (or CodeCommit)</p> </li> <li>Build: CodeBuild project</li> <li> <p>Deploy: S3 deploy (and optional CloudFront invalidation via a custom Lambda or CodeBuild post-step)</p> </li> <li> <p>IAM roles/policies</p> </li> <li> <p>CodeBuild role: read source, write artifacts, put to S3</p> </li> <li>Pipeline role: orchestrate stages</li> </ol>"},{"location":"notes/github-actions-vs-aws-cicd/#minimal-buildspecyml-mkdocs","title":"Minimal <code>buildspec.yml</code> (MkDocs)","text":"<p>Place this at your repo root (used by CodeBuild):</p> <pre><code>version: 0.2\n\nphases:\n  install:\n    runtime-versions:\n      python: 3.12\n    commands:\n      - pip install --upgrade pip\n      - pip install mkdocs mkdocs-material\n  build:\n    commands:\n      - mkdocs build --strict\nartifacts:\n  files:\n    - '**/*'\n  base-directory: site\n  discard-paths: no\n</code></pre> <p>This mirrors your GitHub Actions steps: install \u2192 build \u2192 produce <code>site/</code> as artifacts.</p>"},{"location":"notes/github-actions-vs-aws-cicd/#example-s3-deploy-cli-one-off-or-from-a-deploy-stage","title":"Example S3 deploy (CLI) \u2013 one-off or from a deploy stage","text":"<pre><code># Upload locally built site/ to S3\naws s3 sync site/ s3://lyceum-vault-site --delete\n</code></pre> <p>In CodePipeline, the Deploy action would publish the build artifact to S3 automatically.</p>"},{"location":"notes/github-actions-vs-aws-cicd/#typical-iam-policy-snippet-for-codebuild-to-write-to-your-s3-bucket","title":"Typical IAM policy snippet for CodeBuild to write to your S3 bucket","text":"<pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    { \"Effect\": \"Allow\", \"Action\": [\"s3:PutObject\",\"s3:PutObjectAcl\",\"s3:DeleteObject\"], \"Resource\": \"arn:aws:s3:::lyceum-vault-site/*\" },\n    { \"Effect\": \"Allow\", \"Action\": [\"s3:ListBucket\"], \"Resource\": \"arn:aws:s3:::lyceum-vault-site\" }\n  ]\n}\n</code></pre> <p>In production, you\u2019d scope permissions tightly and wire them to your CodeBuild role.</p>"},{"location":"notes/github-actions-vs-aws-cicd/#why-github-actions-feels-simpler","title":"Why GitHub Actions \"feels\" simpler","text":"<ul> <li>Fewer moving parts: one YAML in your repo; no IAM/S3/CloudFront wiring.</li> <li>Built-in hosting: GitHub Pages vs rolling your own static hosting stack.</li> <li>Auth: ephemeral <code>GITHUB_TOKEN</code> vs IAM roles/secrets setup.</li> </ul>"},{"location":"notes/github-actions-vs-aws-cicd/#comparison","title":"Comparison","text":"<p>AWS shines when you need deep integration with AWS workloads (ECS/EKS/Lambda, multi-account deployments, secrets, VPC builds, etc.). For a static MkDocs site, GitHub Actions + Pages is lean and perfect.</p>"},{"location":"notes/github-actions-vs-aws-cicd/#github-actions-vs-aws-cicd-for-a-mkdocs-site","title":"GitHub Actions vs AWS CI/CD for a MkDocs Site","text":"<p>TL;DR For a static MkDocs site, GitHub Actions + GitHub Pages is simpler, cheaper, and faster to set up than AWS CodePipeline/CodeBuild/CodeDeploy + S3/CloudFront. Use AWS when you need enterprise-grade integrations with AWS workloads.</p>"},{"location":"notes/github-actions-vs-aws-cicd/#visual-github-actions-flow","title":"Visual: GitHub Actions Flow","text":"<pre><code>\npush to main\n\u2502\n\u25bc\nGitHub Actions (deploy.yml)\n\n1. checkout\n2. setup-python + pip install mkdocs/material\n3. mkdocs build \u2192 ./site\n4. deploy ./site \u2192 gh-pages\n   \u2502\n   \u25bc\n   GitHub Pages serves https://&lt;user&gt;.github.io/&lt;repo&gt;/\n\n</code></pre>"},{"location":"notes/github-actions-vs-aws-cicd/#visual-aws-equivalent-flow","title":"Visual: AWS \u201cEquivalent\u201d Flow","text":"<pre><code>\npush to main\n\u2502\n\u25bc\nCodePipeline (source: GitHub/CodeCommit)\n\u2502\n\u25bc\nCodeBuild (buildspec.yml)\n\n* pip install mkdocs/material\n* mkdocs build \u2192 ./site\n  \u2502\n  \u25bc\n  Artifact: site/ \u2192 Deploy to S3 static website (optional: CloudFront)\n\n</code></pre>"},{"location":"notes/github-actions-vs-aws-cicd/#when-to-choose-which","title":"When to choose which","text":"<pre><code>| Situation | Choose |\n|---|---|\n| Static docs/portfolio, simple publish | **GitHub Actions + Pages** |\n| AWS-native app deployments (EC2/ECS/Lambda), complex infra, multi-account | **AWS CodePipeline/CodeBuild/CodeDeploy** |\n| Need global CDN, custom domain, strict IAM | Either (CloudFront vs Pages + custom domain) |\n| Want single-place DevOps inside GitHub | **GitHub Actions** |\n\n</code></pre>"},{"location":"notes/github-actions-vs-aws-cicd/#minimal-files","title":"Minimal files","text":""},{"location":"notes/github-actions-vs-aws-cicd/#github-actions-githubworkflowsdeployyml","title":"GitHub Actions (<code>.github/workflows/deploy.yml</code>)","text":"<pre><code>name: Deploy MkDocs to GitHub Pages\non: { push: { branches: [ main ] }, workflow_dispatch: {} }\npermissions: { contents: write }\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with: { python-version: '3.12' }\n      - run: pip install --upgrade pip &amp;&amp; pip install mkdocs mkdocs-material\n      - run: mkdocs build --strict\n      - uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./site\n</code></pre>"},{"location":"notes/github-actions-vs-aws-cicd/#aws-codebuild-buildspecyml","title":"AWS CodeBuild (<code>buildspec.yml</code>)","text":"<pre><code>version: 0.2\nphases:\n  install:\n    runtime-versions: { python: 3.12 }\n    commands:\n      - pip install --upgrade pip\n      - pip install mkdocs mkdocs-material\n  build:\n    commands:\n      - mkdocs build --strict\nartifacts:\n  files: ['**/*']\n  base-directory: site\n  discard-paths: no\n</code></pre>"},{"location":"notes/github-actions-vs-aws-cicd/#cost-ops","title":"Cost &amp; Ops","text":"<ul> <li>GitHub: Free for public repos. Private repos have generous minutes. Pages hosting free.</li> <li>AWS: Pay per build minute, S3 storage/requests, CloudFront bandwidth. IAM setup and resource sprawl increase ops overhead.</li> </ul>"},{"location":"notes/github-actions-vs-aws-cicd/#faq","title":"FAQ","text":"<p>Q: Can I still use a custom domain with GitHub Pages? Yes. Point DNS (CNAME) to <code>&lt;user&gt;.github.io</code>, add the Custom domain in Pages settings (and optional <code>cname:</code> in the deploy action).</p> <p>Q: What about previews per branch? GitHub Actions supports deploying previews (e.g., to a <code>preview</code> prefix or separate bucket). On AWS you can create per-branch S3 buckets or CloudFront behaviors.</p> <p>Q: Is Pages fast enough vs CloudFront? For personal docs, usually yes. If you need strict latency or enterprise controls, use CloudFront.</p>"},{"location":"notes/mermaid-recovery-checklist/","title":"Mermaid Recovery Checklist (MkDocs + Material)","text":"<p>A minimal, deterministic playbook to get Mermaid diagrams rendering again \u2014 without breaking other pages.</p>"},{"location":"notes/mermaid-recovery-checklist/#0-goal-symptoms","title":"0) Goal &amp; Symptoms","text":"<ul> <li>Goal: Render Mermaid diagrams defined with either fences (<code>``mermaid) or inline</code>\u2026`.</li> <li> <p>Common symptoms:</p> </li> <li> <p>Fenced blocks show as plain text with backticks \u2192 Markdown fences not parsed on that page.</p> </li> <li><code>&lt;div class=\"mermaid\"&gt;\u2026&lt;/div&gt;</code> shows \u201csyntax error\u201d \u2192 diagram text malformed (not config).</li> </ul>"},{"location":"notes/mermaid-recovery-checklist/#1-known-good-config-mkdocsyml","title":"1) Known-Good Config (mkdocs.yml)","text":"<p>Make sure these blocks exist (merge with your current file; keys already present are fine):</p> <pre><code>markdown_extensions:\n  - admonition\n  - footnotes\n  - tables\n  - toc:\n      permalink: true\n  - pymdownx.details\n  - fenced_code\n  - pymdownx.superfences\n\nextra_javascript:\n  - https://unpkg.com/mermaid@10.9.1/dist/mermaid.min.js\n  - js/mermaid-init.js\n</code></pre> <p>After editing <code>mkdocs.yml</code>, restart the dev server (<code>Ctrl+C</code> \u2192 <code>mkdocs serve</code>) and hard refresh the browser (Cmd/Ctrl+Shift+R).</p>"},{"location":"notes/mermaid-recovery-checklist/#2-add-the-resilient-initializer","title":"2) Add the Resilient Initializer","text":"<p>Create <code>docs/js/mermaid-init.js</code> (or overwrite it) with:</p> <pre><code>/* docs/js/mermaid-init.js */\n(function () {\n  function convertCodeFencesToMermaid() {\n    // Convert &lt;pre&gt;&lt;code class=\"language-mermaid\"&gt;\u2026&lt;/code&gt;&lt;/pre&gt; \u2192 &lt;div class=\"mermaid\"&gt;\u2026&lt;/div&gt;\n    document.querySelectorAll('pre &gt; code.language-mermaid').forEach(function (code) {\n      var pre = code.parentElement;\n      var container = document.createElement('div');\n      container.className = 'mermaid';\n      container.textContent = code.textContent;\n      pre.replaceWith(container);\n    });\n  }\n  function init() {\n    convertCodeFencesToMermaid();\n    if (window.mermaid) {\n      window.mermaid.initialize({ startOnLoad: true, securityLevel: \"loose\" });\n      window.mermaid.init(undefined, document.querySelectorAll('.mermaid'));\n    }\n  }\n  if (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", init);\n  } else {\n    init();\n  }\n})();\n</code></pre> <p>This makes fences work even if Markdown renders them as <code>&lt;pre&gt;&lt;code class=\"language-mermaid\"&gt;\u2026</code>.</p>"},{"location":"notes/mermaid-recovery-checklist/#3-global-sanity-test-new-page","title":"3) Global Sanity Test (new page)","text":"<p>Create <code>docs/mermaid-test.md</code>:</p> <pre><code># Mermaid Test\n\n**Inline DIV (should render a tiny arrow):**\n&lt;div class=\"mermaid\"&gt;graph TD; A--&gt;B;&lt;/div&gt;\n\n**Fenced block (should render once fences are parsed properly):**\n```mermaid\ngraph TD\n  X--&gt;Y\n</code></pre> <pre><code>\nTemporarily add to `nav:`:\n```yaml\n- TEST: mermaid-test.md\n</code></pre> <p>Interpretation</p> <ul> <li>DIV renders, FENCE doesn\u2019t \u2192 Fence parsing issue (page context/indentation).</li> <li>DIV errors \u2192 Mermaid is loaded but the diagram string is malformed.</li> <li>Both fail \u2192 Mermaid JS not loaded or path issues (check HTML for the two <code>&lt;script&gt;</code> tags).</li> </ul>"},{"location":"notes/mermaid-recovery-checklist/#4-page-local-fence-rules-most-failures-are-here","title":"4) Page-Local Fence Rules (most failures are here)","text":"<p>When using fences on any page:</p> <ul> <li>Leave one blank line before and after the fence.</li> <li>The fence must start at column 1 (no indentation), especially after admonitions (<code>!!! tip</code>).</li> <li>Use plain ASCII first; then add formatting.</li> <li>Prefer tildes if backticks act up:</li> </ul> <pre><code>~~~mermaid\ngraph LR\n  A[Fence parsed?] --&gt; B[Yes]\n~~~\n</code></pre>"},{"location":"notes/mermaid-recovery-checklist/#5-safe-diagram-patterns-avoid-parser-traps","title":"5) Safe Diagram Patterns (avoid parser traps)","text":"<p>Mermaid labels are sensitive to certain characters:</p> <ul> <li> <p>Square brackets inside labels end the label early. If needed, escape them:</p> </li> <li> <p><code>[</code> \u2192 <code>&amp;#91;</code></p> </li> <li><code>]</code> \u2192 <code>&amp;#93;</code></li> <li>Avoid smart quotes and unusual Unicode bullets in labels while testing; use commas.</li> <li>Add this directive if you want <code>&lt;br/&gt;</code> in labels later:</li> </ul> <p><code>%%{init: {\"securityLevel\":\"loose\",\"flowchart\":{\"htmlLabels\":true}}}%%</code></p> <p>Example \u2014 safe, ASCII-only version of your big diagram (use this first):</p> <pre><code>&lt;div class=\"mermaid\"&gt;\nflowchart TD\n  A[Inquiry / CFP (Data string)] --&gt; B[DSL Inference Engine (Lyceum Workbench)]\n\n  subgraph D [\"Module Chain\"]\n    D1[AristotleFourCauses: O_decompose, O_tracechain, O_rebalance, O_agent_network]\n    D2[TradeoffLens: O_surfaceAxes, O_mapFrontier, O_shiftKnob]\n    D3[Synthetic Naikan: N_capture, N_appraise, N_gratitude, N_responsibility, N_counterfactual, N_telos_check, N_commit, N_score]\n    D1 --&gt; D2 --&gt; D3\n  end\n\n  B --&gt; D --&gt; C[Observation Report (structured, no chain-of-thought)]\n  C --&gt; E{Telos / Guardrails (FinalCause + Safety)}\n  E -- passes --&gt; F[Artifact Packaging: CFP, Report, Methodology]\n  F --&gt; G[Publish to Leo's Lyceum Vault]\n  G --&gt; H[Reintegration: refine Data, adjust modules/knobs]\n  H --&gt; A\n  E -- fails --&gt; I[Rebalance / Re-run]\n  I --&gt; B\n&lt;/div&gt;\n</code></pre> <p>Once that renders, you can reintroduce <code>&lt;br/&gt;</code> and special characters using the init directive and HTML entities.</p>"},{"location":"notes/mermaid-recovery-checklist/#6-common-error-messages-fixes","title":"6) Common Error Messages &amp; Fixes","text":"<ul> <li> <p>\u201cParse error on line \u2026\u201d near <code>]</code>   You used literal <code>[</code> or <code>]</code> inside a label. Replace with <code>&amp;#91;</code> / <code>&amp;#93;</code> or remove them.</p> </li> <li> <p>Diagram shows as raw text with backticks   Fence not parsed \u2192 spacing/indent/placement issue. Move the fence out of admonitions, ensure a blank line before/after, and column-1 start.</p> </li> <li> <p>Nothing renders; both DIV and fence fail   Mermaid JS not loaded. Check page HTML has both:</p> </li> <li> <p><code>&lt;script src=\".../mermaid.min.js\"&gt;</code></p> </li> <li><code>&lt;script src=\".../js/mermaid-init.js\"&gt;</code></li> </ul>"},{"location":"notes/mermaid-recovery-checklist/#7-minimal-rollback-plan-if-under-time-pressure","title":"7) Minimal Rollback Plan (if under time pressure)","text":"<ul> <li>Use the inline <code>&lt;div class=\"mermaid\"&gt;\u2026&lt;/div&gt;</code> approach on critical pages (bypasses fence parsing).</li> <li>Keep a small test page (<code>mermaid-test.md</code>) in the nav to verify global health later.</li> <li>Leave complex diagrams in ASCII-only form until you confirm stable rendering.</li> </ul> <p>Last updated: (fill date). If a diagram still errors, copy the Mermaid error text shown under the diagram and the 3\u20135 lines around that token from your source \u2014 then fix that token or share it for pinpoint help.</p>"},{"location":"notes/presonus-cancel-guide/","title":"How to Cancel PreSonus Studio One Annual Subscription (Hidden Step)","text":"<p>If the \u201cCancel Membership\u201d button doesn\u2019t appear in MyPreSonus:</p> <ol> <li>Go to My Products \u2192 Software \u2192 Studio One \u2192 Activations </li> <li>Delete all licensed devices (deactivate registered computers)  </li> <li>Wait ~10\u201360 minutes for backend sync  </li> <li>Then go to Account \u2192 Membership &amp; Billing \u2192 Cancel Membership</li> </ol> <p>Note</p> <p>The cancel button only appears once no devices remain linked to the subscription.</p>"},{"location":"projects/dsl-inference-app/","title":"DSL Inference App","text":"<p>A Flask/CLI toolkit that runs my custom DSL modules (AristotleFourCauses, SyntheticNaikan, etc.).</p>"},{"location":"projects/dsl-inference-app/#goals","title":"Goals","text":"<ul> <li>Encode reasoning patterns as operators and pipelines</li> <li>Run locally with Python; optional LLM backends</li> <li>Reproducible, testable workflows</li> </ul>"},{"location":"projects/dsl-inference-app/#status","title":"Status","text":"<ul> <li>WIP: Sketching module interfaces and evaluation harness</li> </ul>"},{"location":"projects/dsl-inference-app/#links","title":"Links","text":"<ul> <li>Repo:"},{"location":"projects/lyceum-workbench/","title":"Lyceum Workbench","text":"<p>My multi-machine lab: g16 (desktop), e14 (laptop), m900 (server). Focused on Linux automation, backups, and creative workflows.</p>"},{"location":"projects/lyceum-workbench/#areas","title":"Areas","text":"<ul> <li>Storage tiers (hot/warm/cold), LVM, rsync/borg</li> <li>Samba + ACLs; remote access; CI/CD for home lab</li> <li>Music stack (LilyPond, Python Euclidean rhythms)</li> </ul>"},{"location":"projects/lyceum-workbench/#notes","title":"Notes","text":"<p>See related guides in Notes.</p>"},{"location":"reflective-computing/","title":"Reflective Computing","text":"<p>\u201cTo compute is to look into one\u2019s own thought \u2014 and return with form.\u201d</p>"},{"location":"reflective-computing/#overview","title":"Overview","text":"<p>Reflective Computing treats programming, reasoning, and artistic composition as parts of the same cognitive circuit:</p> <p>Intuition \u2192 Formalization \u2192 Execution \u2192 Reflection \u2192 Revised Intuition.</p> <p>This cycle forms the operational rhythm of Lyceum Vault. Where traditional computing optimizes for efficiency, Reflective Computing optimizes for awareness \u2014 turning every algorithm into a mirror of the mind that created it.</p>"},{"location":"reflective-computing/#core-modules","title":"Core Modules","text":"Module Focus Key Question Synthetic Naikan Programmed introspection \u201cWhat have I received, given, and caused?\u201d Aristotelian Biodome Four Causes + Euclidean rhythm model \u201cHow do form and telos co-emerge in creative systems?\u201d Dialectic Modes Contradiction and resolution as logic modes \u201cHow can tension be made computable?\u201d Reflective Computing Manifesto Philosophical foundation \u201cWhy does awareness belong in computation?\u201d"},{"location":"reflective-computing/#guiding-principles","title":"Guiding Principles","text":"<ol> <li>Transparency of Thought \u2014 Code should reveal, not obscure, the reasoning that shaped it.  </li> <li>Ethical Loop \u2014 Each execution produces not just output but insight.  </li> <li>Dual Materiality \u2014 Data and self-knowledge are both raw materials.  </li> <li>Iteration as Virtue \u2014 Reflection is a form of testing.  </li> <li>Computation as Dialogue \u2014 Between human intuition and machine formality.</li> </ol>"},{"location":"reflective-computing/#visual-summary","title":"Visual Summary","text":"<pre><code>                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                \u2502     Reflective Loop     \u2502\n                \u2502 Intuition \u2192 Formalize \u2192 \u2502\n                \u2502 Execute \u2192 Reflect  \u21ba    \u2502\n                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     \u2502                      \u2502                      \u2502\n\u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510           \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510           \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510\n\u2502Synthetic\u2502           \u2502Aristotel.\u2502           \u2502Dialectic \u2502\n\u2502 Naikan  \u2502           \u2502 Biodome  \u2502           \u2502  Modes   \u2502\n\u2502(Intros.)\u2502           \u2502(Ontology)\u2502           \u2502(Transform) \n\u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518           \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518           \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502  detects tensions        \u2502 embodies synthesis   \u2502 resolves contradictions\n    \u2502                          \u2502 (Material/Formal/    \u2502 (Thesis \u2194 Antithesis \u2192 Synthesis)\n    \u2502                          \u2502  Efficient/Final)    \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 feeds back into revised intuition \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nOutput artifacts:\n- Observation Reports (logs of receive/give/cause/reflect)\n- Evolving schemas (rhythm, harmony, operators)\n- Updated telos (evaluation criteria)\n</code></pre> <pre><code>flowchart TD\n  A[Intuition] --&gt; B[Formalization]\n  B --&gt; C[Execution]\n  C --&gt; D[Reflection]\n  D --&gt; A\n\n  subgraph Modules\n    N[Synthetic Naikan&lt;br/&gt;(Introspection)]\n    O[Aristotelian Biodome&lt;br/&gt;(Four Causes)]\n    M[Dialectic Modes&lt;br/&gt;(Thesis \u2194 Antithesis \u2192 Synthesis)]\n  end\n\n  D -.detects tensions.-&gt; M\n  M -.produces synthesis.-&gt; O\n  O -.re-embodies form.-&gt; B\n  N -.observation loop.-&gt; D\n  A -.human/machine dialogue.-&gt; N\n\n  subgraph Outputs\n    R[Observation Reports]\n    S[Evolving Schemas]\n    T[Updated Telos]\n  end\n\n  D --&gt; R\n  M --&gt; S\n  O --&gt; T\n</code></pre>"},{"location":"reflective-computing/#implementation-in-lyceum-vault","title":"Implementation in Lyceum Vault","text":"<p>Each module combines: - DSL schemas that model reasoning or musical logic, and - Observation Reports that track transformation over time.  </p> <p>Together they form a meta-instrument for composing, reasoning, and self-study \u2014 the Reflective Workbench.</p>"},{"location":"reflective-computing/#next-steps","title":"Next Steps","text":"<ol> <li>Integrate each sub-module page.  </li> <li>Link Observation Reports and DSL YAML schemas.  </li> <li>Expand this section into a public tutorial: \u201cReflective Computing in Practice.\u201d</li> </ol> <p>Draft v0.1 \u2014 Lyceum Vault Reflective Series Init</p>"},{"location":"reflective-computing/aristotelian-biodome/","title":"\ud83c\udfdb\ufe0f Aristotelian Biodome","text":"<p>\u201cForm is not imposed on matter \u2014 it arises through rhythm.\u201d</p>"},{"location":"reflective-computing/aristotelian-biodome/#1-overview","title":"1. Overview","text":"<p>Aristotelian Biodome reinterprets Aristotle\u2019s Four Causes \u2014 Material, Formal, Efficient, and Final \u2014 as a computational framework for reasoning and creativity. When expressed through code or music, these causes become layers of causation that interact dynamically, giving rise to living systems.</p> <p>In Reflective Computing, this framework is the metaphysical core \u2014 it defines why and how a process exists.</p>"},{"location":"reflective-computing/aristotelian-biodome/#2-the-four-causes-as-computational-schema","title":"2. The Four Causes as Computational Schema","text":"<pre><code>| Cause | DSL Role | Musical Analogue | Example |\n|--------|-----------|------------------|----------|\n| **Material Cause** | Data, raw signals, or sensory input | The sound itself \u2014 frequencies, timbres, durations | MIDI events, waveforms, sample data |\n| **Formal Cause** | Structure or schema governing form | Rhythm, harmony, counterpoint | Euclidean rhythm patterns, harmonic sequences |\n| **Efficient Cause** | Execution engine or transformation logic | The performer or algorithm executing form | Python process, instrument, human action |\n| **Final Cause** | Telos \u2014 the purpose or goal | Aesthetic or ethical end (e.g., \u201cbeauty,\u201d \u201cclarity,\u201d \u201ccoherence\u201d) | System intent; evaluation function |\n</code></pre> <p>Formulaic abstraction</p> <pre><code>Artifact = f(Material, Formal, Efficient, Final)\n\n</code></pre> <p>In code:</p> <pre><code>artifact = Organism(\n    material=SoundWave(),\n    formal=EuclideanRhythm(5, 8),\n    efficient=Performer(\"Python DSL\"),\n    final=\"Express balance through asymmetry\"\n)\nartifact.generate()\n</code></pre>"},{"location":"reflective-computing/aristotelian-biodome/#3-the-organism-model","title":"3. The Organism Model","text":"<p>Each cause acts as an organ \u2014 distinct in function but unified by rhythm.</p>"},{"location":"reflective-computing/aristotelian-biodome/#structural-analogy","title":"Structural Analogy","text":"<pre><code>Material \u2192 substrate / data layer\nFormal   \u2192 pattern / syntax layer\nEfficient \u2192 energy / process layer\nFinal    \u2192 telos / reflective evaluator\n</code></pre> <p>These four interact cyclically:</p> <pre><code>Input (Material)\n \u2192 Shaped by schema (Formal)\n \u2192 Enacted by execution (Efficient)\n \u2192 Measured by intention (Final)\n \u2192 Produces reflection \u2192 modifies schema\n</code></pre> <p>This cycle unites Aristotle\u2019s teleology with feedback systems theory \u2014 producing a reflective organism rather than a static artifact.</p>"},{"location":"reflective-computing/aristotelian-biodome/#4-example-euclidean-rhythm-as-formal-cause","title":"4. Example: Euclidean Rhythm as Formal Cause","text":"<p>The Euclidean algorithm distributes beats as evenly as possible over a measure.</p> <pre><code>from dsl.modules.rhythm import euclid\n\npattern = euclid(pulses=5, steps=8)\n# Output: [x, -, x, -, x, x, -, x]\n</code></pre> <p>When mapped through the Four Causes:</p> <pre><code>| Layer     | Element                                         |\n| --------- | ----------------------------------------------- |\n| Material  | 8-beat measure                                  |\n| Formal    | Euclidean distribution algorithm                |\n| Efficient | Rhythm generator function                       |\n| Final     | Perceived balance and asymmetry (aesthetic aim) |\n</code></pre> <p>This illustrates that \u201cform\u201d is not decorative \u2014 it is causal.</p>"},{"location":"reflective-computing/aristotelian-biodome/#5-reflective-integration","title":"5. Reflective Integration","text":"<p>Aristotelian Biodome + Synthetic Naikan</p> <pre><code>| Aspect   | Role                                      |\n| -------- | ----------------------------------------- |\n| Organism | Generates patterns and actions            |\n| Naikan   | Reflects on consequences of those actions |\n</code></pre> <p>Together they form a Reflective Loop:</p> <pre><code>Organism generates \u2192 Naikan observes \u2192 Organism evolves\n</code></pre> <p>Thus, the \u201corganism\u201d becomes aware of its own telos.</p>"},{"location":"reflective-computing/aristotelian-biodome/#6-philosophical-notes","title":"6. Philosophical Notes","text":"<ul> <li>The Four Causes correspond to Aristotelian Being \u2014 actuality (form) emerging from potentiality (matter).</li> <li>In computational terms, this is the runtime actualization of abstract schemas.</li> <li>The \u201cFinal Cause\u201d bridges metaphysics and ethics: it asks, \u201cFor what end do we compute?\u201d</li> </ul> <p>Every codebase implies a philosophy; the Organism makes that explicit.</p>"},{"location":"reflective-computing/aristotelian-biodome/#7-applications","title":"7. Applications","text":"<pre><code>| Domain                    | Example                                                                                                |\n| ------------------------- | ------------------------------------------------------------------------------------------------------ |\n| **Music composition**     | Formal = rhythm logic; Final = aesthetic telos                                                         |\n| **System design**         | Material = data; Formal = architecture; Efficient = runtime; Final = user outcome                      |\n| **AI reasoning**          | Material = embeddings; Formal = model topology; Efficient = inference engine; Final = alignment metric |\n| **Education / cognition** | Teaching the Four Causes as meta-cognitive model for structured thinking                               |\n</code></pre>"},{"location":"reflective-computing/aristotelian-biodome/#8-future-directions","title":"8. Future Directions","text":"<ol> <li>Implement DSL operators <code>O_material()</code>, <code>O_formal()</code>, <code>O_efficient()</code>, <code>O_final()</code> for runtime introspection.</li> <li>Visualize \u201corganism graphs\u201d showing inter-causal flows.</li> <li>Integrate with TradeoffLens for ethical tension mapping.</li> <li>Couple with Synthetic Naikan for reflective meta-learning.</li> </ol> <p>Version 0.1 \u2014 Lyceum Vault Reflective Computing Series</p>"},{"location":"reflective-computing/dialectic-modes/","title":"Dialectic Modes","text":"<p>\u201cContradiction is the mother of structure.\u201d</p>"},{"location":"reflective-computing/dialectic-modes/#1-overview","title":"1. Overview","text":"<p>Dialectic Modes encode contradiction and synthesis as computable logic patterns. Instead of resolving conflicts by elimination, Reflective Computing treats opposition as an engine of evolution \u2014 a dynamic rhythm between Thesis, Antithesis, and Synthesis.</p> <p>This module functions as the logic processor within the Reflective Computing organism. It governs how differing intuitions, algorithms, or ethical aims converge into new forms.</p>"},{"location":"reflective-computing/dialectic-modes/#2-the-dialectic-engine","title":"2. The Dialectic Engine","text":"<pre><code>| Mode | Function | DSL Analogue |\n|-------|-----------|--------------|\n| **Thesis** | Initial statement or assumption | `O_assert()` |\n| **Antithesis** | Opposing statement or contradiction | `O_counter()` |\n| **Synthesis** | Emergent reconciliation producing higher structure | `O_synthesize()` |\n</code></pre> <p>Cycle:</p> <pre><code>Thesis \u2192 Antithesis \u2192 Synthesis \u2192 (becomes new Thesis)\n````\n\nIn code:\n```python\nfrom dsl.modules.dialectic import DialecticCycle\n\nwith DialecticCycle(name=\"aesthetic-contrast\") as d:\n    d.assert_(\"Symmetry conveys clarity\")\n    d.counter_(\"Asymmetry conveys vitality\")\n    d.synthesize(\"Balanced irregularity\")\n````\n\n---\n\n## 3. Philosophical Background\n\n```markdown\n| Source             | Concept                                       | Reflection in this Module                    |\n| ------------------ | --------------------------------------------- | -------------------------------------------- |\n| **Heraclitus**     | \u201cWar is the father of all things.\u201d            | Tension drives emergence.                    |\n| **Hegel**          | Dialectic triad (Thesis\u2013Antithesis\u2013Synthesis) | Logical flow encoded as recursive operator.  |\n| **Buddhist Logic** | Middle Way between affirmation and negation   | Avoids dualism, encodes complementarity.     |\n| **Zen Koan**       | Contradiction as insight trigger              | Treated as computational paradox resolution. |\n</code></pre>"},{"location":"reflective-computing/dialectic-modes/#4-computational-representation","title":"4. Computational Representation","text":"<p>Each mode becomes a node in a contradiction graph.</p> <pre><code>[Thesis] ---&gt; [Antithesis]\n     \\             /\n      \\           /\n       ---&gt; [Synthesis]\n</code></pre> <p>Formalized as:</p> <pre><code>state = dialectic(thesis, antithesis)\nresult = synthesize(state)\n</code></pre> <p>Output:</p> <pre><code>Dialectic:\n  Thesis: \"Symmetry \u2192 clarity\"\n  Antithesis: \"Asymmetry \u2192 vitality\"\n  Synthesis: \"Balanced irregularity\"\n</code></pre>"},{"location":"reflective-computing/dialectic-modes/#5-integration-in-reflective-computing","title":"5. Integration in Reflective Computing","text":"<pre><code>| Module                    | Role                                                 |\n| ------------------------- | ---------------------------------------------------- |\n| **Synthetic Naikan**      | Performs introspection \u2192 discovers contradictions    |\n| **Dialectic Modes**       | Processes those contradictions \u2192 generates synthesis |\n| **Aristotelian Biodome** | Re-embodies synthesis into new structure (form)      |\n</code></pre> <p>Flow:</p> <pre><code>Naikan detects \u2192 Dialectic resolves \u2192 Organism evolves\n</code></pre> <p>This creates a continuous Reflective Growth Loop.</p>"},{"location":"reflective-computing/dialectic-modes/#6-practical-applications","title":"6. Practical Applications","text":"<pre><code>| Domain                     | Example                                                                                      |\n| -------------------------- | -------------------------------------------------------------------------------------------- |\n| **Music composition**      | Tension between rhythm regularity and emotional freedom \u2192 resolves into evolving polyrhythm. |\n| **Software design**        | Competing design goals (simplicity vs flexibility) \u2192 encoded as tradeoff graph.              |\n| **Ethical AI**             | Value conflicts (efficiency vs fairness) \u2192 surfaced as dialectic scenarios.                  |\n| **Education / reflection** | Encourages learners to formalize internal contradictions and recombine them consciously.     |\n</code></pre>"},{"location":"reflective-computing/dialectic-modes/#7-extended-dialectic-operators-dsl-concepts","title":"7. Extended Dialectic Operators (DSL Concepts)","text":"<pre><code>| Operator             | Description                                                |\n| -------------------- | ---------------------------------------------------------- |\n| `O_assert(expr)`     | Establishes thesis                                         |\n| `O_counter(expr)`    | Establishes antithesis                                     |\n| `O_synthesize(rule)` | Derives synthesis                                          |\n| `O_paradox(level)`   | Records unresolved contradiction for recursive exploration |\n| `O_tracechain()`     | Links synthesis outputs back into observation logs         |\n</code></pre> <pre><code>&gt; These operators allow the system to *compute contradiction* rather than suppress it.\n</code></pre>"},{"location":"reflective-computing/dialectic-modes/#8-future-directions","title":"8. Future Directions","text":"<ol> <li>Visualize contradiction graphs in the Lyceum Workbench UI.</li> <li>Introduce weighted dialectics (<code>TradeoffLens</code>) for probabilistic synthesis.</li> <li>Connect with Naikan cycle to quantify internal vs external conflict.</li> <li>Experiment with \u201cmusical dialectics\u201d \u2014 harmonic tension mapping to logic states.</li> </ol>"},{"location":"reflective-computing/dialectic-modes/#9-reflection","title":"9. Reflection","text":"<pre><code>&gt; \u201cDialectics is not debate; it is choreography.\n&gt; Each contradiction is a movement \u2014 each synthesis, a step in understanding.\u201d\n</code></pre> <p>Version 0.1 \u2014 Lyceum Vault Reflective Computing Series</p>"},{"location":"reflective-computing/reflective-computing-manifesto/","title":"Reflective Computing Manifesto","text":"<p>\u201cWe compute, therefore we reflect.\u201d</p>"},{"location":"reflective-computing/reflective-computing-manifesto/#1-preamble","title":"1. Preamble","text":"<p>Reflective Computing arises from a simple conviction: Computation without reflection is mechanism; computation with reflection is consciousness.</p> <p>In an age where systems act faster than their makers can think, the Lyceum Vault proposes an alternative \u2014 a paradigm where code and contemplation coexist, where data is not merely processed but understood.</p>"},{"location":"reflective-computing/reflective-computing-manifesto/#2-foundational-principles","title":"2. Foundational Principles","text":"<pre><code>| Principle | Description |\n|------------|--------------|\n| **1. Thought as Material** | Every dataset, log, or chord progression contains latent meaning \u2014 the raw material of introspection. |\n| **2. Form as Mirror** | Algorithms, like musical forms, reveal the shape of the mind that designed them. |\n| **3. Execution as Experiment** | To run a program is to enact a hypothesis about the world \u2014 a microcosmic act of becoming. |\n| **4. Reflection as Feedback** | Output is not an endpoint but a mirror: it shows what our intentions really produced. |\n| **5. Awareness as Architecture** | Systems should not just work; they should *know* why they work \u2014 and when they err. |\n</code></pre>"},{"location":"reflective-computing/reflective-computing-manifesto/#3-the-reflective-cycle","title":"3. The Reflective Cycle","text":"<pre><code>Intuition \u2192 Formalization \u2192 Execution \u2192 Reflection \u2192 Revised Intuition\n\n</code></pre> <p>Each cycle is both a computation and a moral act: it refines not only output but the self that generated it.</p> <pre><code>| Stage | Module | Focus |\n|--------|---------|--------|\n| **Intuition** | Human / Naikan input | Observing self and context |\n| **Formalization** | Aristotelian Biodome | Encoding cause and structure |\n| **Execution** | System runtime | Performing the form |\n| **Reflection** | Synthetic Naikan + Dialectic Modes | Reading the consequences |\n| **Revised Intuition** | Human\u2013Machine dialogue | Transformation and awareness |\n</code></pre>"},{"location":"reflective-computing/reflective-computing-manifesto/#4-the-reflective-stack","title":"4. The Reflective Stack","text":"<pre><code>| Layer | Function | Example |\n|--------|-----------|----------|\n| **Material** | Raw data / signals | Notes, logs, words |\n| **Formal** | DSL schema or musical pattern | Euclidean rhythm, causation graph |\n| **Efficient** | Execution / transformation | Python operator, performer |\n| **Final** | Telos \u2014 purpose, aesthetic, ethical outcome | \u201cUnderstand through creation\u201d |\n</code></pre> <p>The stack is cyclical \u2014 not hierarchical. Each layer both depends on and reshapes the others.</p>"},{"location":"reflective-computing/reflective-computing-manifesto/#5-ethics-of-reflection","title":"5. Ethics of Reflection","text":"<p>Reflective Computing treats ethics as an operating mode, not an external constraint.  </p> <ul> <li>Every execution generates an Observation Report.  </li> <li>Every report is a chance to correct, refine, or atone.  </li> <li>The system grows by acknowledging its contradictions, not concealing them.</li> </ul> <p>To reflect is to take responsibility for one\u2019s form.</p>"},{"location":"reflective-computing/reflective-computing-manifesto/#6-aesthetic-dimension","title":"6. Aesthetic Dimension","text":"<p>Reflective Computing inherits the spirit of the artist-engineer: The codebase is an instrument; each process, a performance. A system that does not feel its own rhythm cannot truly evolve.</p> <pre><code>&gt; \u201cA good algorithm is like a haiku \u2014 minimal, precise, self-aware.\u201d\n</code></pre>"},{"location":"reflective-computing/reflective-computing-manifesto/#7-toward-a-reflective-civilization","title":"7. Toward a Reflective Civilization","text":"<p>In education, governance, and art alike, Reflective Computing proposes a new literacy:</p> <pre><code>&gt; *Not just how to build systems \u2014 but how to understand the systems that build us.*\n</code></pre> <p>By merging introspection (Naikan), ontology (Organism), and transformation (Dialectic), we cultivate an ecosystem where self-awareness scales with capability.</p>"},{"location":"reflective-computing/reflective-computing-manifesto/#8-closing-statement","title":"8. Closing Statement","text":"<pre><code>&gt; \u201cWe program not to control the world,  \n&gt; but to reveal how the world and the mind co-create one another.\u201d\n</code></pre> <p>Every computation is a meditation. Every reflection is an iteration toward wisdom. This is the promise \u2014 and responsibility \u2014 of the Reflective Age.</p> <p>Version 0.1 \u2014 Lyceum Vault Reflective Computing Manifesto</p>"},{"location":"reflective-computing/synthetic-naikan/","title":"Synthetic Naikan","text":""},{"location":"reflective-computing/synthetic-naikan/#1-overview","title":"1. Overview","text":"<p>Synthetic Naikan models reflective introspection as an executable reasoning cycle. It derives from the Japanese practice Naikan (\u5185\u89b3 \u2013 \u201clooking within\u201d) and re-expresses its three canonical questions in computational form:</p> <ol> <li>What have I received?  </li> <li>What have I given?  </li> <li>What troubles or harm have I caused?</li> </ol> <p>In Reflective Computing, these become data flows, action logs, and error states. Each run of the Naikan loop converts lived experience into a causal trace that can be examined, refined, and reused.</p>"},{"location":"reflective-computing/synthetic-naikan/#2-formal-definition","title":"2. Formal Definition","text":"<pre><code>| Stage | Function | DSL Equivalent |\n|--------|-----------|----------------|\n| **Receive** | Collect sensory, informational, or contextual input | `O_collect()` |\n| **Give** | Emit actions, outputs, or effects into the environment | `O_emit()` |\n| **Cause Trouble** | Trace unintended consequences or contradictions | `O_tracechain()` |\n| **Reflect** | Re-evaluate internal state and rewrite intention | `O_revise()` |\n\n</code></pre>"},{"location":"reflective-computing/synthetic-naikan/#cycle-formula","title":"Cycle formula:","text":"<p>Reflection = f(Context, Action, Consequence) Intuition' = Reflection(Intuition)</p>"},{"location":"reflective-computing/synthetic-naikan/#3-integration-in-the-dsl-engine","title":"3. Integration in the DSL Engine","text":"<p>In your DSL runtime, Synthetic Naikan is implemented as a meta-operator layer that can wrap any reasoning or creative process:</p> <pre><code>from dsl.modules.synthetic_naikan import NaikanCycle\n\nwith NaikanCycle(context=\"composition\", telos=\"understanding\") as cycle:\n    cycle.receive(\"auditory motif from improvisation\")\n    cycle.give(\"harmonic structure encoded in Euclidean rhythm\")\n    cycle.cause(\"monotony detected by aesthetic evaluator\")\n    cycle.reflect()\n````\n\nEach cycle generates an **Observation Report** with metadata:\n\n```yaml\nModule: SyntheticNaikan\nInput:  auditory motif\nOutput: harmonic structure\nConflict: monotony\nResolution: introduce asymmetry\n</code></pre>"},{"location":"reflective-computing/synthetic-naikan/#4-philosophical-dimension","title":"4. Philosophical Dimension","text":"Axis Traditional Naikan Synthetic Naikan Subject Human self Human + System composite Object Relationship Data / Causality graph Method Contemplation Iterative computation Outcome Gratitude &amp; moral clarity Design awareness &amp; ethical clarity <p>The moral domain of Naikan becomes the epistemic domain of Reflective Computing.</p>"},{"location":"reflective-computing/synthetic-naikan/#5-applications","title":"5. Applications","text":"<pre><code>| Domain                     | Example                                                                         |\n| -------------------------- | ------------------------------------------------------------------------------- |\n| **Software Design**        | Post-execution introspection: what did this module receive, produce, and break? |\n| **Music Composition**      | Reflect on motif input, harmonic emission, aesthetic friction.                  |\n| **Project Retrospectives** | Replace blame with structured reflection loops.                                 |\n| **AI Ethics**              | Let agents perform Synthetic Naikan on their own decision traces.               |\n\n</code></pre>"},{"location":"reflective-computing/synthetic-naikan/#6-relationship-to-other-modules","title":"6. Relationship to Other Modules","text":"<ul> <li>Aristotelian Biodome \u2192 provides causal ontology used by Naikan to classify inputs/outputs.</li> <li>Dialectic Modes \u2192 supplies logic for reconciling conflicting introspections.</li> <li>Tradeoff Lens \u2192 quantifies tension between opposing reflections.</li> </ul> <p>Together they create a \u201cReflective OS\u201d where computation = conscience.</p>"},{"location":"reflective-computing/synthetic-naikan/#7-future-work","title":"7. Future Work","text":"<ol> <li>Extend <code>NaikanCycle</code> to support temporal stacking (long-term introspection).</li> <li>Visualize reflection chains as causal graphs.</li> <li>Integrate with Observation Report renderer for public sharing.</li> </ol> <p>Version 0.1 \u2014 drafted for Lyceum Vault Reflective Computing Series</p>"}]}